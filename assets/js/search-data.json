{
  
    
        "post0": {
            "title": "Who's protected by the Covid19 lockdown?",
            "content": "Welcome to the first Turing Data Story. . Our goal at Turing Data Stories is to produce educational data science content by telling stories with data. . A data story begins with a question about a societal issue that is close to our hearts, and covers our entire analysis process in trying to answer it. From gathering and cleaning the data, to using it for data analysis. We hope that our stories will not only provide the reader with insight into some societal issues, but also to showcase the explanatory power of data science, and enable the reader to try out some of these techniques themselves. . Each of our stories comes in the form of a Jupyter notebook, which will contain all the code required to follow along with the analysis, along with an explanations of our thought process. . Covid19 and Deprivation . Everyone in the UK has been impacted by the COVID-19 pandemic, from London to Manchester, Cardiff to Edinburgh. The virus has affected everyone, and taken many of the lives of people across Country. . On the 23rd of March 2020, the UK Government announced various lockdown measures with the intention of limiting the spread of the virus and reducing the number of COVID-19 related deaths. These lockdown measures meant the temporary closure of many commercial shops and businesses, as well as the limiting of work based travel to only those jobs that could not be done at home. . We are concerned that the impact of COVID-19 has disproportionately affected certain groups of people. In particular, that the lockdown measure may have had a worse impact for those in the most deprived areas, whose livelihoods may have required them to leave the house more frequently. . There have been a number of concerns with Government COVID-19 reporting, in particular with testing and mortality statistics. This motivates independent, open analysis to validate and expand on our understanding of our current state of the pandemic. . Earlier in June, the Office of National Statistics (ONS) published a report exploring this exact question: to assess whether those living in the most deprived areas of the UK were disproportionately affected by COVID-19. The report seems to confirm our fear - between the months of March to May 2020 those in the most deprived areas of the UK were more than twice as likely to die as a result of COVID-19 than those in the least deprived areas. . There are two caveats that we have with the ONS analysis. The first is reproducibility. We want to confirm the ONS results by making analysis procedure open. The second caveat is that the ONS report aggregates data over time, and therefore that it might miss interesting differences in outcomes between the different stages of lockdown. Between March and May represents the time when the lockdown was most severe, with measures relaxing from June onwards. We wonder whether the ONS analysis will continue to be relevant as lockdown eases. For this purpose, we wish to extend the ONS analysis to cover all available data, and at the same time, make a comparison between the different stages of lockdown. . Thus for our first story we ask: . Have the COVID-19 lockdown measures protected people equally across all socio-economic groups in society? . We have two main objectives . 1) We want to replicate the ONS analysis using their provided data to ensure that we have all the inputs necessary to understand the problem. . 2) We want to extend the ONS analysis to consider different time periods - representing the severity of the different stages of lockdown - to see how this affects people from different socio-economic groups. . Key Metrics . Our analysis will involve exploring the relationship between the following key metrics: . COVID-19 mortality rates over time and across geographical regions. | Index of multiple deprivation (IMD) by geographical region - a measure of the geographic spread of social deprivation (see definition and explanation). | . Data Sources . We will use the following datasets: . Mortality count time series | IMD Rankings (England only) | Populations | Local Authority District Code Region Lookup Table | ONS Mortality and Depravation Data | . In case any of the data sources become unavailable in the future, a download mirror is availible here. . For simplicity this study is only focusing on England. We understand the importance of investigating all of the regions of the UK. However due to the difference of lockdown measures across the nations of the UK, and also due to the way the IMD ranking is defined, an independent analysis is required for each nation. We warmly encourage the reader to replicate our analysis with the other nations. . Analysis Outline . Here&#39;s a list of the different steps of the analysis: . Download and process data from multiple deprivation and COVID-19 deaths. | Combining the different datasets into a single table by joining on geographical region. | Calculate age standardised mortality rates from mortality counts. | Replicate the ONS analysis, looking at mortality rate by region. | Visualise the distribution of COVID-19 deaths across the UK. | Segment the data into time periods, corresponding to the different stages of lockdown. | Explore at the relationship between our two key metrics (deprivation and mortality rates) in the different time periods. | Data Collation and Wrangling . &#128295; Setup . We begin by setting up our environment and importing various python libraries that we will be using for the analysis. In particular, pandas and numpy are key data science libraries used for data processing. matplotlib and seaborn will help us visualise our data. . import os import requests from datetime import datetime import zipfile import numpy as np import pandas as pd from scipy.stats import pearsonr import matplotlib.pyplot as plt import seaborn as sns sns.set(style=&#39;white&#39;) . 🔧 Let&#39;s make some directories in which we can store the data we are going to download. . downloaded_data_dir = &#39;data/downloaded&#39; # processed data goes here derived_data_dirname = &#39;data/derived&#39; # create the directory if it does not already exist os.makedirs(downloaded_data_dir, exist_ok=True) os.makedirs(derived_data_dirname, exist_ok=True) . 🔧 Here is a small helper function which will download files from a URL. . def download_file(url, filename): # create the directory if it does not already exist os.makedirs(os.path.dirname(filename), exist_ok=True) # make the HTTP request r = requests.get(url, allow_redirects=True) # save file _ = open(filename, &#39;wb&#39;).write(r.content) . Index of Multiple Deprivation (IMD) . 🔧 Now let&#39;s download and process our deprivation data. This data provides a deprivation rank (lower rank meaning more deprived) for each geographical region in England (the geographical regions are here are called Lower Super Output Areas, or LSOAs). . Download . url = &#39;https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/833970/File_1_-_IMD2019_Index_of_Multiple_Deprivation.xlsx&#39; # specify filename filename = &#39;ONS_2019_Index_of_Multiple_Deprivation.xlsx&#39; # construct file path filepath = os.path.join(downloaded_data_dir, filename) # download and save file at the specified URL download_file(url, filepath) # read the relevant sheet imd_df = pd.read_excel(filepath, sheet_name=&#39;IMD2019&#39;) . If we sort by deprivation rank, we can get an idea of the most / least deprived LSOAs. . imd_df.sort_values(by=&#39;Index of Multiple Deprivation (IMD) Rank&#39;).head() . LSOA code (2011) LSOA name (2011) Local Authority District code (2019) Local Authority District name (2019) Index of Multiple Deprivation (IMD) Rank Index of Multiple Deprivation (IMD) Decile . 21400 E01021988 | Tendring 018A | E07000076 | Tendring | 1 | 1 | . 12280 E01012673 | Blackpool 010A | E06000009 | Blackpool | 2 | 1 | . 12288 E01012681 | Blackpool 006A | E06000009 | Blackpool | 3 | 1 | . 12279 E01012672 | Blackpool 013B | E06000009 | Blackpool | 4 | 1 | . 12278 E01012671 | Blackpool 013A | E06000009 | Blackpool | 5 | 1 | . imd_df.sort_values(by=&#39;Index of Multiple Deprivation (IMD) Rank&#39;).tail() . LSOA code (2011) LSOA name (2011) Local Authority District code (2019) Local Authority District name (2019) Index of Multiple Deprivation (IMD) Rank Index of Multiple Deprivation (IMD) Decile . 17759 E01018293 | South Cambridgeshire 012B | E07000012 | South Cambridgeshire | 32840 | 10 | . 15715 E01016187 | Bracknell Forest 002D | E06000036 | Bracknell Forest | 32841 | 10 | . 30976 E01031773 | Mid Sussex 008D | E07000228 | Mid Sussex | 32842 | 10 | . 26986 E01027699 | Harrogate 021A | E07000165 | Harrogate | 32843 | 10 | . 17268 E01017787 | Chiltern 005E | E07000005 | Chiltern | 32844 | 10 | . Derive Mean IMD Decile . At this point we want to join the two datasets together in order to explore the relationship between our two key metrics. . A problem is that the index of multiple deprivation comes with a geographical granularity at the LSOA level, whilst the COVID-19 mortality counts come with a geographical granularity at the Local Authority District (LAD) level. To complicate things, for each LAD there are generally multiple LSOAs, each with different indexes of multiple deprivation. For more information about the different geographical regions in the UK, read this. . We need to aggregate the LSOAs into LADs by averaging out the indexes of multiple deprivation. First let&#39;s write some functions to help us. . def get_mean_IMD_rank(LAD_code): # select relevant LSOAs LSOAs = imd_df[imd_df[&#39;Local Authority District code (2019)&#39;] == LAD_code] # calculate mean IMD rank mean_IMD_rank = round(LSOAs[&#39;Index of Multiple Deprivation (IMD) Rank&#39;].mean(), 2) std_IMD_rank = round(LSOAs[&#39;Index of Multiple Deprivation (IMD) Rank&#39;].std(), 2) return mean_IMD_rank, std_IMD_rank def get_mean_IMD_decile(LAD_code): # select relevant LSOAs LSOAs = imd_df[imd_df[&#39;Local Authority District code (2019)&#39;] == LAD_code] # calculate mean IMD rank mean_IMD_decile = round(LSOAs[&#39;Index of Multiple Deprivation (IMD) Decile&#39;].mean(), 2) std_IMD_decile = round(LSOAs[&#39;Index of Multiple Deprivation (IMD) Decile&#39;].std(), 2) return mean_IMD_decile, std_IMD_decile . Now we can use these functions to calculate the mean IMD decile in each Local Authority District. . LAD_codes = imd_df[&#39;Local Authority District code (2019)&#39;].unique() #mean_IMD_rank, std_IMD_rank = np.vectorize(get_mean_IMD_rank)(LAD_codes) mean_IMD_decile, std_IMD_decile = np.vectorize(get_mean_IMD_decile)(LAD_codes) LAD_df = pd.DataFrame({&#39;LAD Code&#39;: LAD_codes, &#39;LAD Name&#39;: imd_df[&#39;Local Authority District name (2019)&#39;].unique(), #&#39;Mean IMD Rank&#39;: mean_IMD_rank, #&#39;Std IMD Rank&#39; : std_IMD_rank, &#39;Mean IMD decile&#39;: mean_IMD_decile, &#39;Std IMD decile&#39;: std_IMD_decile}) LAD_df = LAD_df.set_index(&#39;LAD Code&#39;) . Let&#39;s make a quick histogram of the mean IMD decile. . LAD_df[&#39;Mean IMD decile&#39;].hist(range=(1,11), bins=10) plt.xlabel(&#39;Mean IMD Decile&#39;) plt.ylabel(&#39;Count&#39;) plt.show() . It should be noted that we lose some information when averaging the IMD ranks in this way. The central region of the distribution is relatively flat, and so we cannot differentiate well between LADs in this region. . Notice there are no Local Authority Districts that have a mean IMD decile of 1 or 10. This is due to the presence of variance inside each Local Authority District. For example, there is no single LAD whose constituent LSOAs all have a IMD deciles of 1 (or 10). See the table below for the maximum and minimum mean IMD deciles. Note that Blackpool, the most deprived (on average) LAD in England, has a mean IMD decile of 2.41. This demonstrates that this LAD has some LSOAs that are not in the most deprived deciles. The opposite is true for the least deprived areas. The &quot;Std IMD decile&quot; column in the below table shows the level of variation of the IMD (measured by the standard deviation) within each LAD. . LAD_df.sort_values(by=&#39;Mean IMD decile&#39;) . LAD Name Mean IMD decile Std IMD decile . LAD Code . E06000009 Blackpool | 2.41 | 1.58 | . E08000003 Manchester | 2.54 | 1.84 | . E08000011 Knowsley | 2.56 | 1.91 | . E09000002 Barking and Dagenham | 2.68 | 1.01 | . E09000012 Hackney | 2.74 | 1.11 | . ... ... | ... | ... | . E07000155 South Northamptonshire | 8.78 | 1.32 | . E07000176 Rushcliffe | 8.82 | 1.58 | . E07000005 Chiltern | 8.86 | 1.51 | . E06000041 Wokingham | 9.27 | 1.43 | . E07000089 Hart | 9.39 | 1.08 | . 317 rows × 3 columns . Derive Age Standardisation Weight . To account for the different population sizes in the different Local Area Districts, we want to use a mortality rate rather than an overall count. When we do this we convert a count into a rate per 100,000 people. Furthermore, we want to account for differences in the age distributions of the different LADs in order to make a valid comparison between the different geographic areas. An age standardised rate allows for this comparison. Ideally we would calculate this rate directly from the data, but as our mortality over time dataset does not contain information about age, we instead will need to extract a standardisation factor from a different dataset. . The dataset we will use to do this comes from the ONS study on COVID-19 and deprivation. We will use it to derive a standardisation factor which will allow us to convert our mortality counts into an age and population standardise mortality rate. This mortality rate is a European standard (2013 ESP). As we mentioned, we cannot calculate the factor directly as our mortality over time dataset does not include age information, so this reverse engineering is the best we can do. . For more information on how the mortality rate is calculated, see here. Simply put, this is the formula that we are assuming approximates the relationship between the age standardised rate and the mortality count: . age standardised mortality rate = [standardisation factor] * [mortality count] . ⚠️ The above procedure is not ideal because it assumes that the distribution of ages of those who died inside each Local Area District is constant in time, and therefore the standardisation factor we derive in one dataset (which doesn&#39;t have information about time) can be applied to the other (which has information about time). . First, let&#39;s download the data. . url = &#39;https://www.ons.gov.uk/file?uri=%2fpeoplepopulationandcommunity%2fbirthsdeathsandmarriages%2fdeaths%2fdatasets%2fdeathsinvolvingcovid19bylocalareaanddeprivation%2f1march2020to17april2020/referencetablesdraft.xlsx&#39; # specify filename filename = &#39;ONS_age_standarisation_April2020.xlsx&#39; # construct file path filepath = os.path.join(downloaded_data_dir, filename) # download and save file at the specified URL download_file(url, filepath) # read the relevant sheet age_rate_df = pd.read_excel(filepath, sheet_name=&#39;Table 2&#39;, header=3) . Next, we can do some minor selection and reformatting of the DataFrame. . age_rate_persons_df = age_rate_df[age_rate_df[&#39;Sex&#39;] == &#39;Persons&#39;] # rename columns age_rate_persons_df.columns = [&#39;Sex&#39;, &#39;Geography type&#39;, &#39;LAD Code&#39;, &#39;Area name&#39;, &#39;All causes Deaths&#39;, &#39;All causes Rate&#39;,&#39;&#39; ,&#39;All causes Lower CI&#39;, &#39;All causes Upper CI&#39;,&#39;&#39; ,&#39;COVID-19 Deaths&#39;, &#39;COVID-19 Rate&#39;, &#39;&#39;,&#39;COVID-19 Lower CI&#39;, &#39;COVID-19 Upper CI&#39; ] # remove anomalous row (Isles of Scilly) without numerical data age_rate_persons_df = age_rate_persons_df[age_rate_persons_df[&#39;All causes Rate&#39;] != &#39;:&#39;] age_rate_persons_df = age_rate_persons_df[age_rate_persons_df[&#39;COVID-19 Rate&#39;] != &#39;:&#39;] age_rate_persons_df.head() . Sex Geography type LAD Code Area name All causes Deaths All causes Rate All causes Lower CI All causes Upper CI COVID-19 Deaths COVID-19 Rate COVID-19 Lower CI COVID-19 Upper CI . 1 Persons | Unitary Authority | E06000001 | Hartlepool | 154 | 170.7 | NaN | 143.5 | 197.8 | NaN | 29 | 31 | NaN | 20.7 | 44.5 | . 2 Persons | Unitary Authority | E06000002 | Middlesbrough | 289 | 256 | NaN | 226.1 | 286 | NaN | 89 | 79 | NaN | 63.2 | 97.6 | . 3 Persons | Unitary Authority | E06000003 | Redcar and Cleveland | 215 | 142.6 | NaN | 123.5 | 161.8 | NaN | 40 | 26.5 | NaN | 18.9 | 36.2 | . 4 Persons | Unitary Authority | E06000004 | Stockton-on-Tees | 297 | 167 | NaN | 147.8 | 186.1 | NaN | 38 | 21 | NaN | 14.8 | 28.9 | . 5 Persons | Unitary Authority | E06000005 | Darlington | 169 | 151.5 | NaN | 128.6 | 174.4 | NaN | 26 | 22.9 | NaN | 15 | 33.7 | . Let us now calculate the factor by which we need to multiply the count of deaths to derive the age-standardised mortality rate per 100,000 habitants. . age_rate_persons_df[&#39;All causes rate factor&#39;] = ( age_rate_persons_df[&#39;All causes Rate&#39;] / age_rate_persons_df[&#39;All causes Deaths&#39;] ) age_rate_persons_df[&#39;COVID-19 rate factor&#39;] = ( age_rate_persons_df[&#39;COVID-19 Rate&#39;] / age_rate_persons_df[&#39;COVID-19 Deaths&#39;] ) # drop columns age_rate_persons_df = age_rate_persons_df[[&#39;LAD Code&#39;, &#39;All causes rate factor&#39;, &#39;COVID-19 rate factor&#39;]] . We can merge this into the previous DataFrame so all the information is accessible in one place. . LAD_df = LAD_df.reset_index() LAD_df = LAD_df.merge(age_rate_persons_df, on=&#39;LAD Code&#39;, how=&#39;inner&#39;) LAD_df = LAD_df.set_index(&#39;LAD Code&#39;) . Finally, let&#39;s save the standardisation factors for each LAD, stored in the DataFrame LAD_df, so that we can easily use them later. . LAD_df_filename = &#39;Local_Authority_District_Lookup.csv&#39; LAD_df_filepath = os.path.join(derived_data_dirname, LAD_df_filename) # write to csv LAD_df.to_csv(LAD_df_filepath, index=False) . Mortality Counts . Now we are ready to download the main dataset that we will be analysing: the number of COVID-19 and non COVID-19 deaths across time and place. . Download and Format . Let&#39;s download the ONS dataset containing mortality counts by week and Local Authority District. . url = &#39;https://www.ons.gov.uk/file?uri=%2fpeoplepopulationandcommunity%2fhealthandsocialcare%2fcausesofdeath%2fdatasets%2fdeathregistrationsandoccurrencesbylocalauthorityandhealthboard%2f2020/lahbtablesweek35.xlsx&#39; # specify filename filename = &#39;ONS_COVID_Mortality_Counts.xlsx&#39; # construct file path filepath = os.path.join(downloaded_data_dir, filename) # download and save file at the specified URL download_file(url, filepath) . sheet_name = &#39;Occurrences - All data&#39; # read the sheet into a pandas DataFrame mortality_df = pd.read_excel(filepath, sheet_name=sheet_name, header=3) . Let&#39;s quickly check if all the LADs are represented in both datasets so that we can join the IMD rank with the mortality information for each LAD. . not_in_imd = set(mortality_df[&#39;Area code&#39;]) - set(imd_df[&#39;Local Authority District code (2019)&#39;]) not_in_mortality = set(imd_df[&#39;Local Authority District code (2019)&#39;]) - set(mortality_df[&#39;Area code&#39;]) print(&#39;There are&#39;, len(not_in_mortality), &#39;codes in the IMD dataset but not in the mortality dataset.&#39;) print(&#39;There are&#39;, len(not_in_imd), &#39;codes in the mortality dataset but not in the IMD dataset.&#39;) . There are 4 codes in the IMD dataset but not in the mortality dataset. There are 30 codes in the mortality dataset but not in the IMD dataset. . We have 346 LAD codes in the mortality data set, and only 317 in the IMD dataset. Upon closer inspection, it turned out that IMD dataset does not contain any Welsh entries (as the IMD ranking is defined for England only). Additionally, the mortality dataset contains a single entry for Buckinghamshire, a new unitary authority in 2020 (E06000060). The IMD dataset, meanwhile, contains 4 LAD codes for Buckinghamshire. We will drop these anomalous locations from the analysis for now. . missing_LAD_codes_df = mortality_df[~mortality_df[&#39;Area code&#39;].isin(imd_df[&#39;Local Authority District code (2019)&#39;])] missing_LAD_codes = missing_LAD_codes_df[&#39;Area code&#39;].unique() # filter by common LAD codes mortality_df = mortality_df[~mortality_df[&#39;Area code&#39;].isin(missing_LAD_codes)] . Furthermore, the age standardisation factor derived previously was not able to be derived for one LAD (the Isles of Scilly). Let&#39;s drop that now too to avoid any problems later down the line. . mortality_df = mortality_df[mortality_df[&#39;Area code&#39;].isin(LAD_df.index)] . Finally, since we are interested in looking at the effect of COVID-19 and the lockdown policies on the working population, we can remove deaths that took place in care homes or hospices. . mortality_df = mortality_df[(mortality_df[&#39;Place of death&#39;] != &#39;Care home&#39;) &amp; (mortality_df[&#39;Place of death&#39;] != &#39;Hospice&#39;)] # to instead select only deaths in care homes or hospices, use this line: #mortality_df = mortality_df[(mortality_df[&#39;Place of death&#39;]==&#39;Care home&#39;) | # (mortality_df[&#39;Place of death&#39;]==&#39;Hospice&#39;)] . The mortality data starts from Wednesday 1st Jan 2020. Let&#39;s use that to convert the supplied week numbers into a date. . mortality_df[&#39;Date&#39;] = [datetime.strptime(f&#39;2020 {n-1} 3&#39;, &#39;%Y %W %w&#39;).strftime(&#39;%Y-%m-%d&#39;) for n in mortality_df[&#39;Week number&#39;]] # drop week number column mortality_df = mortality_df.drop(columns=&#39;Week number&#39;) . Finally, we can take a random sample of 5 rows from the DataFrame to check everything looks okay, and to get an idea of its structure. . mortality_df.sample(n=5) . Area code Geography type Area name Cause of death Place of death Number of deaths Date . 59338 E07000123 | Local Authority | Preston | COVID 19 | Hospital | 10 | 2020-04-08 | . 19259 E07000234 | Local Authority | Bromsgrove | COVID 19 | Other communal establishment | 0 | 2020-01-29 | . 66358 E06000044 | Local Authority | Portsmouth | COVID 19 | Hospital | 10 | 2020-04-22 | . 46906 E07000116 | Local Authority | Tunbridge Wells | COVID 19 | Hospital | 0 | 2020-03-18 | . 44191 E08000008 | Local Authority | Tameside | COVID 19 | Elsewhere | 0 | 2020-03-11 | . If you want to reproduce the results from the initial ONS report, you can restrict the date ranges of the data by uncommenting these lines. . #mortality_df = mortality_df[mortality_df[&#39;Date&#39;] &lt; &#39;2020-04-18&#39;] . Download Local Area District to Region Lookup Table . As shown in the ONS report, a nice plot to make is the total number of mortalities in each region of England (a region is composed of many LADs). To do this, we need to know which region each LAD belongs. Let&#39;s download this data now from the following website: https://geoportal.statistics.gov.uk/datasets/local-authority-district-to-region-april-2019-lookup-in-england. . url = &#39;https://opendata.arcgis.com/datasets/3ba3daf9278f47daba0f561889c3521a_0.csv&#39; # specify filename filename = &#39;LAD_Code_Region_Lookup.csv&#39; # construct file path filepath = os.path.join (downloaded_data_dir, filename) # download and save file at the specified URL download_file(url, filepath) # read the relevant sheet LAD_code_region_lookup_df = pd.read_csv(filepath, index_col=&#39;FID&#39;).set_index(&#39;LAD19CD&#39;) . Taking a look at the data, we can see that the index &quot;LAD19CD&quot; contains our familiar LAD code, and the column &quot;RGN12NM&quot; gives us the name of the region in which that LAD is located. Perfect! . LAD_code_region_lookup_df.head() . LAD19NM RGN19CD RGN19NM . LAD19CD . E09000001 City of London | E12000007 | London | . E06000054 Wiltshire | E12000009 | South West | . E09000002 Barking and Dagenham | E12000007 | London | . E09000003 Barnet | E12000007 | London | . E09000004 Bexley | E12000007 | London | . Split Data Into Different Time Periods . Now, the final step before we can really start our analysis is to split our dataset into different time periods. As mentioned in the introduction, we want to compare COVID-19 mortality before, during and after lockdown was in place. Within each time period, we sum over all deaths, and add the IMD decile for each LAD. Finally, we&#39;ll also include Region information. . Let&#39;s write a function to sum the mortality data over time to get the total number of deaths. Then, we&#39;ll reformat the DataFrame to separate COVID-19 and non COVID-19 deaths. Finally, we&#39;ll use the table downloaded in the previous section to get the Region name for each LAD. The function combines information from all the previous DataFrames and produces a DataFrame with everything we need to do our analysis. . def filter_date_and_aggregate(df, date_range=None): &quot;&quot;&quot; The function: - Selects dates that are inside the supplied date range. - Sums over time in this date range. - Separates COVID-19 vs non COVID-19 deaths. - Decorates rows with area and region name columns. - Calculates the standardised mortality rate using previously calculated factors. - Pulls in the mean IMD decile as previously calculated. &quot;&quot;&quot; # filter dates if date_range: df = df[(df[&#39;Date&#39;] &gt;= date_range[0]) &amp; (df[&#39;Date&#39;] &lt; date_range[1])] # sum over time df = df.groupby(by=[&#39;Area code&#39;, &#39;Cause of death&#39;]).sum() df = df.reset_index(level=[-1]) # seperate out all deaths and COVID deaths as their own columns df = df.pivot(columns=&#39;Cause of death&#39;, values=&#39;Number of deaths&#39;) df.columns.name = &#39;&#39; # rename columns df = df.rename(columns={&#39;All causes&#39;: &#39;Total deaths&#39;, &#39;COVID 19&#39;: &#39;COVID deaths&#39;}) # add non-COVID deaths as column df[&#39;Non COVID deaths&#39;] = df[&#39;Total deaths&#39;] - df[&#39;COVID deaths&#39;] # add area names df[&#39;Area name&#39;] = LAD_df.loc[df.index][&#39;LAD Name&#39;] # add region names df[&#39;Region name&#39;] = LAD_code_region_lookup_df.loc[df.index][&#39;RGN19NM&#39;] # Calculate the rate per 100k using the age-standardisation factor estimated previously df[&#39;COVID-19 rate&#39;] = (LAD_df.loc[df.index][&#39;COVID-19 rate factor&#39;] * df[&#39;COVID deaths&#39;]).astype(float) df[&#39;All causes rate&#39;] = (LAD_df.loc[df.index][&#39;All causes rate factor&#39;] * df[&#39;Total deaths&#39;]).astype(float) # import mean IMD rank df[&#39;Mean IMD decile&#39;] = LAD_df[&#39;Mean IMD decile&#39;] return df . mortality_sum_df = mortality_df.groupby(by=[&#39;Area code&#39;, &#39;Date&#39;, &#39;Cause of death&#39;]).sum().reset_index() . First, let&#39;s agreggate the data without splitting into different time periods. . # and also includes information about deprivation, no date filtering yet. total_deaths_df = filter_date_and_aggregate(mortality_sum_df) . Now we can split up the data into three periods. The first period is from January 1st to April 7th - 16 days from the beginning of lockdown. The second period runs from April 7th to June 1st - 16 days after the stay at home order was lifted. The final period runs from June 1st to August 28th. . We use a time delay of 16 days after key policy decisions to account for the time lag between onset of the disase and death. The number was taken from this study: https://www.bmj.com/content/368/bmj.m1091. . first_date_range = (&#39;2020-01-01&#39;, &#39;2020-04-07&#39;) first_df = filter_date_and_aggregate(mortality_sum_df, first_date_range) first_df[&#39;period&#39;] = 1 # second date range second_date_range = (&#39;2020-04-07&#39;, &#39;2020-06-01&#39;) second_df = filter_date_and_aggregate(mortality_sum_df, second_date_range) second_df[&#39;period&#39;] = 2 # second date range third_date_range = (&#39;2020-06-01&#39;, &#39;2020-08-28&#39;) third_df = filter_date_and_aggregate(mortality_sum_df, third_date_range) third_df[&#39;period&#39;] = 3 . print(&#39;Total deaths in before lockdown period: t&#39;, first_df[&#39;COVID deaths&#39;].sum()) print(&#39;Total deaths in during lockdown period: t&#39;, second_df[&#39;COVID deaths&#39;].sum()) print(&#39;Total deaths in after lockdown period: t&#39;, third_df[&#39;COVID deaths&#39;].sum()) . Total deaths in before lockdown period: 6521 Total deaths in during lockdown period: 24179 Total deaths in after lockdown period: 3217 . Let&#39;s also divide the rate by the number of days in each time period, which will give us the the age standardised mortality rate per day. . def get_num_days(date_range): d0 = datetime.strptime(date_range[1], &#39;%Y-%m-%d&#39;) d1 = datetime.strptime(date_range[0], &#39;%Y-%m-%d&#39;) return (d0 - d1).days full_date_range = (&#39;2020-01-01&#39;, &#39;2020-08-28&#39;) total_deaths_df[&#39;All causes rate&#39;] = total_deaths_df[&#39;All causes rate&#39;] / get_num_days(full_date_range) total_deaths_df[&#39;COVID-19 rate&#39;] = total_deaths_df[&#39;COVID-19 rate&#39;] / get_num_days(full_date_range) first_df[&#39;All causes rate&#39;] = first_df[&#39;All causes rate&#39;] / get_num_days(first_date_range) first_df[&#39;COVID-19 rate&#39;] = first_df[&#39;COVID-19 rate&#39;] / get_num_days(first_date_range) second_df[&#39;All causes rate&#39;] = second_df[&#39;All causes rate&#39;] / get_num_days(second_date_range) second_df[&#39;COVID-19 rate&#39;] = second_df[&#39;COVID-19 rate&#39;] / get_num_days(second_date_range) third_df[&#39;All causes rate&#39;] = third_df[&#39;All causes rate&#39;] / get_num_days(third_date_range) third_df[&#39;COVID-19 rate&#39;] = third_df[&#39;COVID-19 rate&#39;] / get_num_days(third_date_range) . all_df = pd.concat([first_df,second_df, third_df]) . Now we are finished with all of the processing steps and we are ready for the fun part: analysing the data! . Study #1 - Regional Mortality Counts &amp; Rates . Our first objective was to reproduce the ONS analysis to ensure that we have all the pieces we need to understand the problem. The first plots that we will replicate compare COVID-19 mortality across the different regions in England (Figures 1 &amp; 2 in the ONS analysis). . Total Mortalities by Region . For Figure 1, we will produce a stacked bar chart showing the mortality count (split up into COVID-19 and non COVID-19 deaths) for each Region in England. . Summing over region and sorting the values, we are almost ready to make the plot. . total_deaths_by_region_df = total_deaths_df.groupby(by=&#39;Region name&#39;).sum() # sort ascending total_deaths_by_region_df = total_deaths_by_region_df.sort_values(by=&#39;Total deaths&#39;, ascending=True) . Finally, let&#39;s write the code to actually make the plot. . xs = total_deaths_by_region_df.index # mortality counts non_covid_deaths = total_deaths_by_region_df[&#39;Non COVID deaths&#39;] covid_deaths = total_deaths_by_region_df[&#39;COVID deaths&#39;] # set bar width width = 0.75 # colors similar to ONS covid_color = (251/255, 213/255, 59/255, 0.9) noncovid_color = (25/255, 142/255, 188/255, 0.9) # create a figure and plot data plt.figure(figsize=(7,10)) p1 = plt.barh(xs, covid_deaths, width, color=covid_color, label=&#39;COVID-19 Deaths&#39;) p2 = plt.barh(xs, non_covid_deaths, width, left=covid_deaths, color=noncovid_color, label=&#39;Non COVID-19 Deaths&#39;) # label axes plt.xlabel(&#39;Deaths Since 01/01/2020&#39;, fontsize=16) plt.ylabel(&#39;Region&#39;, fontsize=16) plt.yticks(rotation=30) # add vertical grid lines plt.gca().xaxis.grid(True, linestyle=&#39;-&#39;, which=&#39;major&#39;, color=&#39;grey&#39;, alpha=.25) # show legend and plot plt.legend(fontsize=14) plt.show() . There it is! A lot of work but now we can already begin to try and understand what this data is telling us. Here are some conclusions: . For all regions, the number of COVID-19 deaths is smaller than the number of non COVID-19 deaths. | The number of deaths varies a lot between different regions. This can be due to the fact that there are different numbers of people living in each region (for example, there are more people living in the South East than there are in the North East). On top of that, we know that older people have a higher risk of dying after contracting COVID-19, and as the age distributions are different for different regions, this can also affect the overall number of deaths. | . Standardised Mortality Rate by Region . To account for the varying population sizes and age distributions, let&#39;s look at the age-standardised mortality rates per 100,000 people, standardised to the 2013 European Standard Population. Age-standardised mortality rates allow for differences in the age structure of populations and therefore allow valid comparisons to be made between geographical areas, the sexes and over time. . total_rates_df_by_region = total_deaths_df.groupby(by=&#39;Region name&#39;, as_index=False).agg(&#39;mean&#39;) total_rates_df_by_region = total_rates_df_by_region.sort_values(by=&#39;All causes rate&#39;, ascending=True) . x_labels = total_rates_df_by_region[&#39;Region name&#39;] xs = np.array(range(len(x_labels))) # mortality counts non_covid_rate = total_rates_df_by_region[&#39;All causes rate&#39;] covid_rate = total_rates_df_by_region[&#39;COVID-19 rate&#39;] # set bar width width = 0.4 # create a figure and plot data plt.figure(figsize=(7,10)) p2 = plt.barh(xs+0.2, non_covid_rate, width, color=noncovid_color, label=&#39;All Causes Mortality Rate&#39;, tick_label=x_labels) p1 = plt.barh(xs-0.2, covid_rate, width, color=covid_color, label=&#39;COVID-19 Mortality Rate&#39;) # label axes plt.xlabel(&#39;Age standardised mortality rate per 100,000 people per day since 01/01/2020&#39;, fontsize=16) plt.ylabel(&#39;Region&#39;, fontsize=16) plt.yticks(rotation=30) # add vertical grid lines plt.gca().xaxis.grid(True, linestyle=&#39;-&#39;, which=&#39;major&#39;, color=&#39;grey&#39;, alpha=.25) # show legend and plot plt.legend(fontsize=14, loc=&#39;lower right&#39;) plt.show() . Note that as we plot the rates, we switch from a stacked bar chart (showing counts of COVID-19 and non COVID-19 mortalities), to two bar charts side by side (showing the COVID-19 mortality rate, and the all causes mortality rate). Even with this caveat in mind, when looking at the chart we see it tells a very different story to the previous plot. For example, in the previous plot, the South East had the highest number of total deaths, but looking at the standardised rates in this plot we see that it is ranked second from the bottom. This shows that the raw mortality counts do not tell the whole story, and so we cannot rely solely on them to make meaningful comparisons between different Regions. . Study 2 - Mortality by Deprivation . We can now study the relationship between COVID-19 mortality and deprivation. To do this we will make some plots showing the standardised mortality rate as a function of the mean IMD decile for each LAD in England. Recall that the rate has been normalised by the number of days in each time period, so that they are comparable. . In the plots, you will see the $y$ axis labelled with &quot;Standardised Mortality Rate&quot;. In fact, this rate is the age standardised count of deaths observed per 100,000 people per day. . def get_corr_and_slope(xs, ys): # calculate the correlation coefficient corr = round(pearsonr(xs, ys)[0], 2) # calcualte the slope of a linear fit slope = round(np.polyfit(xs, ys, 1)[0], 2) return corr, slope . Comparing All Causes and COVID-19 Mortality Rates . To get started, let&#39;s overlay the mortality rates for all causes of death and COVID-19 on the same plot. . po = {&#39;s&#39;: 10, &#39;alpha&#39;:0.5} # select data IMD_decile = total_deaths_df[&#39;Mean IMD decile&#39;] all_causes_rate = total_deaths_df[&#39;All causes rate&#39;] covid_rate = total_deaths_df[&#39;COVID-19 rate&#39;] # calcualte correlations and slopes ac_stats = get_corr_and_slope(IMD_decile, all_causes_rate) c19_stats = get_corr_and_slope(IMD_decile, covid_rate) # make plots plt.figure(figsize=(10,6)) sns.regplot(x=IMD_decile, y=all_causes_rate, label=f&#39;All causes $r={ac_stats[0]}$&#39;, scatter_kws=po) sns.regplot(x=IMD_decile, y=covid_rate, color=&#39;red&#39;, label=f&#39;COVID-19 $r={c19_stats[0]}$&#39;, scatter_kws=po) # format plot plt.ylabel(&#39;Standardised Mortality Rate&#39;, fontsize=14) plt.xlabel(&#39;Mean IMD Decile&#39;, fontsize=14) plt.legend(fontsize=14); plt.ylim((0, 3.5)) plt.show() . In the plot legends, $r$ is the correlation coefficient. If you are unfamiliar with the concept of correlation, or want a refresher, take a look here. . Recall that the lower the mean IMD rank in each LAD, the more deprived the area is. There is a negative correlation between the standardised rate and the IMD decile, for both the all causes rate and the COVID-19 rate. The negative correlation tells us that in more deprived areas (those with a lower mean IMD decile), the standardised mortality rate is higher. . Note however that the strength of the correlations are quite different. COVID-19 appears to discriminate less based on social deprivation than all causes of death combined. This link between social deprivation and mortality has been previously observed - see discussions here and here. . Time Periods . We are now finally ready to investigate the relationship between mortality and deprivation in the different periods of lockdown. The three periods we defined are: . Before lockdown: January 1st to April 7th | Duing lockdown: April 7th to June 1st | After lockdown: June 1st to August 28th | . We will look at this relationship for all causes of death, and for COVID-19 deaths separately. . All Causes . ymax = 4.5 plt.figure(figsize=(16,5)) # calcualte correlations and slopes pre_stats = get_corr_and_slope(first_df[&#39;Mean IMD decile&#39;], first_df[&#39;All causes rate&#39;]) dur_stats = get_corr_and_slope(second_df[&#39;Mean IMD decile&#39;], second_df[&#39;All causes rate&#39;]) pos_stats = get_corr_and_slope(third_df[&#39;Mean IMD decile&#39;], third_df[&#39;All causes rate&#39;]) plt.subplot(131) plt.title(&#39;Before Lockdown&#39;) sns.regplot(x=&#39;Mean IMD decile&#39;, y=&#39;All causes rate&#39;, data=first_df, label=f&quot;$r={pre_stats[0]}$&quot;, scatter_kws=po) plt.xlabel(&#39;Mean IMD Decile&#39;, fontsize=12) plt.ylabel(&#39;All Causes Standardised Mortality Rate&#39;, fontsize=12) plt.legend(); plt.ylim((0, ymax)) plt.subplot(132) plt.title(&#39;During Lockdown&#39;) sns.regplot(x=&#39;Mean IMD decile&#39;, y=&#39;All causes rate&#39;, data=second_df, label=f&quot;$r={dur_stats[0]}$&quot;, scatter_kws=po) plt.xlabel(&#39;Mean IMD Decile&#39;, fontsize=12) plt.ylabel(&#39;All Causes Standardised Mortality Rate&#39;, fontsize=12) plt.legend(); plt.ylim((0, ymax)) plt.subplot(133) plt.title(&#39;After Lockdown&#39;) sns.regplot(x=&#39;Mean IMD decile&#39;, y=&#39;All causes rate&#39;, data=third_df, label=f&quot;$r={pos_stats[0]}$&quot;, scatter_kws=po) plt.xlabel(&#39;Mean IMD Decile&#39;, fontsize=12) plt.ylabel(&#39;All Causes Standardised Mortality Rate&#39;, fontsize=12) plt.legend(); plt.ylim((0, ymax)) plt.show() . After splitting the data into the three time periods, we that the the negative correlation persists for each period, but has different strengths. The potential reasons for the differences in strength are numerous. The middle plot refers to the peak period in the number of COVID-19 deaths. This could be one explanation for the interesting effect that we observe in the middle plot: the correlation is lower (the variance is lager), but the slope seems to be steeper. . To get a better sense of the number of deaths as a function of time take a look at this ONS study. . COVID-19 . Next we&#39;ll make the same set of three plots, but look specifically at deaths involving COVID-19. . ymax = 2.5 plt.figure(figsize=(16,5)) # calcualte correlations and slopes pre_stats = get_corr_and_slope(first_df[&#39;Mean IMD decile&#39;], first_df[&#39;COVID-19 rate&#39;]) dur_stats = get_corr_and_slope(second_df[&#39;Mean IMD decile&#39;], second_df[&#39;COVID-19 rate&#39;]) pos_stats = get_corr_and_slope(third_df[&#39;Mean IMD decile&#39;], third_df[&#39;COVID-19 rate&#39;]) plt.subplot(131) plt.title(&#39;Before Lockdown&#39;) sns.regplot(x=&#39;Mean IMD decile&#39;, y=&#39;COVID-19 rate&#39;, data=first_df, label=f&quot; t$r={pre_stats[0]}$ $m={pre_stats[1]}$&quot;, scatter_kws=po) plt.xlabel(&#39;Mean IMD Decile&#39;, fontsize=12) plt.ylabel(&#39;COVID-19 Standardised Mortality Rate&#39;, fontsize=12) plt.legend(); plt.ylim((0, 1)) plt.subplot(132) plt.title(&#39;During Lockdown&#39;) sns.regplot(x=&#39;Mean IMD decile&#39;, y=&#39;COVID-19 rate&#39;, data=second_df, label=f&quot; t$r={dur_stats[0]}$ $m={dur_stats[1]}$&quot;, scatter_kws=po) plt.xlabel(&#39;Mean IMD Decile&#39;, fontsize=12) plt.ylabel(&#39;COVID-19 Standardised Mortality Rate&#39;, fontsize=12) plt.legend(); plt.ylim((0, ymax)) plt.subplot(133) plt.title(&#39;After Lockdown&#39;) sns.regplot(x=&#39;Mean IMD decile&#39;, y=&#39;COVID-19 rate&#39;, data=third_df, label=f&quot; t$r={pos_stats[0]}$ $m={pos_stats[1]}$&quot;, scatter_kws=po) plt.xlabel(&#39;Mean IMD Decile&#39;, fontsize=12) plt.ylabel(&#39;COVID-19 Standardised Mortality Rate&#39;, fontsize=12) plt.legend(); plt.ylim((0, 1)) plt.show() . ⚠️ The &quot;During Lockdown&quot; middle plot contains the peak of COVID-19 mortalities in the UK. The standardised rate is therefore much higher in this plot, and the range of the $y$-axis has been increased to reflect this. . Looking only at COVID-19 mortalities, we observe that during lockdown and the peak of the pandemic, the strength of the correlation increases. Again, there are many things that could be the cause of this. Our hypothesis is that, during lockdown, those in more socially deprived areas were more likely to be in circumstances that increased their exposure to COVID-19 (for example key workers who are unable to work remotely - see here and here). . Conclusions . We started writing this story in order to investigate whether COVID-19 deaths were related to social deprivation. We&#39;ve also learnt a lot of other things along the way. . First, there is a very strong relationship between deprivation and general mortality. This means that deprived areas have a higher rate of mortality from all causes than less deprived areas. Life is more difficult if you live in deprivation. This effect is still observed when looking at COVID-19 specific morality rates, although is less strong than the trend from all causes. So COVID-19 appears to be less discriminatory across the different parts of society compared to other causes of death. . We suspected at the beginning that the the state of lockdown may have different affects on different groups of people. We thus wanted to know if this relationship between COVID-19 and death rates changed during the different stages of lockdown. Our analysis shows that the relationship is stronger during the main lockdown period. There are many factors that could be influencing this observation. We believe that the fact that people from working class backgrounds are less likely) to be able to work from home made them more prone to contracting the virus during lockdown and take it home with them. This would explain their higher rates of mortality. . At the moment of writing we are entering a second wave. We hope that we will be able to learn from the challenges that were faced earlier this year, and that more consideration and support is offered to people living in the most deprived areas of the country. . Thank you for taking the time to read this first Turing Data Story, we hope you have found it both interesting and informative. We encourage you to expand on the ideas presented in this story and as well as explore your own questions on this topic. 🙂 . We&#39;re now taking in external submissions for new stories 📗 so if you are interested in contributing, please get in touch! .",
            "url": "https://samvanstroud.github.io/fastpages-test/2020/10/14/story1.html",
            "relUrl": "/2020/10/14/story1.html",
            "date": " • Oct 14, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Story1",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Who’s protected by the Covid19 lockdown?” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Welcome to the first Turing Data Story. n”, “ n”, “Our goal at Turing Data Stories is to produce educational data science content by telling stories with data. n”, “ n”, “A data story begins with a question about a societal issue that is close to our hearts, and covers our entire analysis process in trying to answer it. From gathering and cleaning the data, to using it for data analysis. We hope that our stories will not only provide the reader with insight into some societal issues, but also to showcase the explanatory power of data science, and enable the reader to try out some of these techniques themselves. n”, “ n”, “Each of our stories comes in the form of a Jupyter notebook, which will contain all the code required to follow along with the analysis, along with an explanations of our thought process.” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Covid19 and Deprivation n”, “ n”, “Everyone in the UK has been impacted by the COVID-19 pandemic, from London to Manchester, Cardiff to Edinburgh. The virus has affected everyone, and taken many of the lives of people across Country. n”, “ n”, “On the 23rd of March 2020, the UK Government announced various lockdown measures with the intention of limiting the spread of the virus and reducing the number of COVID-19 related deaths. These lockdown measures meant the temporary closure of many commercial shops and businesses, as well as the limiting of work based travel to only those jobs that could not be done at home. n”, “ n”, “We are concerned that the impact of COVID-19 has disproportionately affected certain groups of people. In particular, that the lockdown measure may have had a worse impact for those in the most deprived areas, whose livelihoods may have required them to leave the house more frequently. n”, “ n”, “There have been a number of concerns with Government COVID-19 reporting, in particular with testing and mortality statistics. This motivates independent, open analysis to validate and expand on our understanding of our current state of the pandemic. n”, “ n”, “Earlier in June, the Office of National Statistics (ONS) published a report exploring this exact question: to assess whether those living in the most deprived areas of the UK were disproportionately affected by COVID-19. The report seems to confirm our fear - between the months of March to May 2020 those in the most deprived areas of the UK were more than twice as likely to die as a result of COVID-19 than those in the least deprived areas. n”, “ n”, “There are two caveats that we have with the ONS analysis. The first is reproducibility. We want to confirm the ONS results by making analysis procedure open. The second caveat is that the ONS report aggregates data over time, and therefore that it might miss interesting differences in outcomes between the different stages of lockdown. Between March and May represents the time when the lockdown was most severe, with measures relaxing from June onwards. We wonder whether the ONS analysis will continue to be relevant as lockdown eases. For this purpose, we wish to extend the ONS analysis to cover all available data, and at the same time, make a comparison between the different stages of lockdown. n”, “ n”, “Thus for our first story we ask: n”, “ n”, “Have the COVID-19 lockdown measures protected people equally across all socio-economic groups in society? n”, “ n”, “We have two main objectives n”, “ n”, “1) We want to replicate the ONS analysis using their provided data to ensure that we have all the inputs necessary to understand the problem. n”, “ n”, “2) We want to extend the ONS analysis to consider different time periods - representing the severity of the different stages of lockdown - to see how this affects people from different socio-economic groups. n” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Key Metrics n”, “ n”, “Our analysis will involve exploring the relationship between the following key metrics: n”, “ n”, “- COVID-19 mortality rates over time and across geographical regions. n”, “- Index of multiple deprivation (IMD) by geographical region - a measure of the geographic spread of social deprivation (see definition and explanation). n” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Data Sources n”, “ n”, “We will use the following datasets: n”, “ n”, “- Mortality count time series n”, “- IMD Rankings (England only) n”, “- Populations n”, “- Local Authority District Code Region Lookup Table n”, “- ONS Mortality and Depravation Data n”, “ n”, “In case any of the data sources become unavailable in the future, a download mirror is availible here. n”, “ n”, “For simplicity this study is only focusing on England. We understand the importance of investigating all of the regions of the UK. However due to the difference of lockdown measures across the nations of the UK, and also due to the way the IMD ranking is defined, an independent analysis is required for each nation. We warmly encourage the reader to replicate our analysis with the other nations.” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Analysis Outline n”, “ n”, “Here’s a list of the different steps of the analysis: n”, “ n”, “1. Download and process data from multiple deprivation and COVID-19 deaths. n”, “2. Combining the different datasets into a single table by joining on geographical region. n”, “3. Calculate age standardised mortality rates from mortality counts. n”, “4. Replicate the ONS analysis, looking at mortality rate by region. n”, “5. Visualise the distribution of COVID-19 deaths across the UK. n”, “6. Segment the data into time periods, corresponding to the different stages of lockdown. n”, “7. Explore at the relationship between our two key metrics (deprivation and mortality rates) in the different time periods.” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Data Collation and Wrangling” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## 🔧 Setup n”, “ n”, “We begin by setting up our environment and importing various python libraries that we will be using for the analysis. n”, “In particular, pandas and numpy are key data science libraries used for data processing. matplotlib and seaborn will help us visualise our data.” ] }, { “cell_type”: “code”, “execution_count”: 1, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:11.316228Z”, “start_time”: “2020-10-07T15:26:10.154042Z” } }, “outputs”: [], “source”: [ “import os n”, “import requests n”, “from datetime import datetime n”, “import zipfile n”, “ n”, “import numpy as np n”, “import pandas as pd n”, “from scipy.stats import pearsonr n”, “ n”, “import matplotlib.pyplot as plt n”, “import seaborn as sns n”, “sns.set(style=’white’)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “🔧 Let’s make some directories in which we can store the data we are going to download. “ ] }, { “cell_type”: “code”, “execution_count”: 2, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:11.321873Z”, “start_time”: “2020-10-07T15:26:11.318558Z” } }, “outputs”: [], “source”: [ “# downloaded data goes here n”, “downloaded_data_dir = ‘data/downloaded’ n”, “ n”, “# processed data goes here n”, “derived_data_dirname = ‘data/derived’ n”, “ n”, “# create the directory if it does not already exist n”, “os.makedirs(downloaded_data_dir, exist_ok=True) n”, “os.makedirs(derived_data_dirname, exist_ok=True)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “🔧 Here is a small helper function which will download files from a URL.” ] }, { “cell_type”: “code”, “execution_count”: 3, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:11.327866Z”, “start_time”: “2020-10-07T15:26:11.324483Z” } }, “outputs”: [], “source”: [ “# This function can download data from a URL and then save it in a directory of our choice. n”, “def download_file(url, filename): n”, “ n”, “ # create the directory if it does not already exist n”, “ os.makedirs(os.path.dirname(filename), exist_ok=True) n”, “ n”, “ # make the HTTP request n”, “ r = requests.get(url, allow_redirects=True) n”, “ n”, “ # save file n”, “ _ = open(filename, ‘wb’).write(r.content)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Index of Multiple Deprivation (IMD) n”, “ n”, “🔧 Now let’s download and process our deprivation data. This data provides a deprivation rank (lower rank meaning more deprived) for each geographical region in England (the geographical regions are here are called Lower Super Output Areas, or LSOAs).” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Download” ] }, { “cell_type”: “code”, “execution_count”: 4, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:14.335588Z”, “start_time”: “2020-10-07T15:26:11.329774Z” } }, “outputs”: [], “source”: [ “# specify URL n”, “url = ‘https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/833970/File_1_-_IMD2019_Index_of_Multiple_Deprivation.xlsx’ n”, “ n”, “# specify filename n”, “filename = ‘ONS_2019_Index_of_Multiple_Deprivation.xlsx’ n”, “ n”, “# construct file path n”, “filepath = os.path.join(downloaded_data_dir, filename) n”, “ n”, “# download and save file at the specified URL n”, “download_file(url, filepath) n”, “ n”, “# read the relevant sheet n”, “imd_df = pd.read_excel(filepath, sheet_name=’IMD2019’)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “If we sort by deprivation rank, we can get an idea of the most / least deprived LSOAs.” ] }, { “cell_type”: “code”, “execution_count”: 5, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:14.355259Z”, “start_time”: “2020-10-07T15:26:14.337838Z” } }, “outputs”: [ { “data”: { “text/html”: [ “&lt;div&gt; n”, “ n”, “&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt; n”, “ &lt;thead&gt; n”, “ &lt;tr style=&quot;text-align: right;&quot;&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;LSOA code (2011)&lt;/th&gt; n”, “ &lt;th&gt;LSOA name (2011)&lt;/th&gt; n”, “ &lt;th&gt;Local Authority District code (2019)&lt;/th&gt; n”, “ &lt;th&gt;Local Authority District name (2019)&lt;/th&gt; n”, “ &lt;th&gt;Index of Multiple Deprivation (IMD) Rank&lt;/th&gt; n”, “ &lt;th&gt;Index of Multiple Deprivation (IMD) Decile&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/thead&gt; n”, “ &lt;tbody&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;21400&lt;/th&gt; n”, “ &lt;td&gt;E01021988&lt;/td&gt; n”, “ &lt;td&gt;Tendring 018A&lt;/td&gt; n”, “ &lt;td&gt;E07000076&lt;/td&gt; n”, “ &lt;td&gt;Tendring&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;12280&lt;/th&gt; n”, “ &lt;td&gt;E01012673&lt;/td&gt; n”, “ &lt;td&gt;Blackpool 010A&lt;/td&gt; n”, “ &lt;td&gt;E06000009&lt;/td&gt; n”, “ &lt;td&gt;Blackpool&lt;/td&gt; n”, “ &lt;td&gt;2&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;12288&lt;/th&gt; n”, “ &lt;td&gt;E01012681&lt;/td&gt; n”, “ &lt;td&gt;Blackpool 006A&lt;/td&gt; n”, “ &lt;td&gt;E06000009&lt;/td&gt; n”, “ &lt;td&gt;Blackpool&lt;/td&gt; n”, “ &lt;td&gt;3&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;12279&lt;/th&gt; n”, “ &lt;td&gt;E01012672&lt;/td&gt; n”, “ &lt;td&gt;Blackpool 013B&lt;/td&gt; n”, “ &lt;td&gt;E06000009&lt;/td&gt; n”, “ &lt;td&gt;Blackpool&lt;/td&gt; n”, “ &lt;td&gt;4&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;12278&lt;/th&gt; n”, “ &lt;td&gt;E01012671&lt;/td&gt; n”, “ &lt;td&gt;Blackpool 013A&lt;/td&gt; n”, “ &lt;td&gt;E06000009&lt;/td&gt; n”, “ &lt;td&gt;Blackpool&lt;/td&gt; n”, “ &lt;td&gt;5&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/tbody&gt; n”, “&lt;/table&gt; n”, “&lt;/div&gt;” ], “text/plain”: [ “ LSOA code (2011) LSOA name (2011) Local Authority District code (2019) n”, “21400 E01021988 Tendring 018A E07000076 n”, “12280 E01012673 Blackpool 010A E06000009 n”, “12288 E01012681 Blackpool 006A E06000009 n”, “12279 E01012672 Blackpool 013B E06000009 n”, “12278 E01012671 Blackpool 013A E06000009 n”, “ n”, “ Local Authority District name (2019) n”, “21400 Tendring n”, “12280 Blackpool n”, “12288 Blackpool n”, “12279 Blackpool n”, “12278 Blackpool n”, “ n”, “ Index of Multiple Deprivation (IMD) Rank n”, “21400 1 n”, “12280 2 n”, “12288 3 n”, “12279 4 n”, “12278 5 n”, “ n”, “ Index of Multiple Deprivation (IMD) Decile n”, “21400 1 n”, “12280 1 n”, “12288 1 n”, “12279 1 n”, “12278 1 “ ] }, “execution_count”: 5, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “imd_df.sort_values(by=’Index of Multiple Deprivation (IMD) Rank’).head()” ] }, { “cell_type”: “code”, “execution_count”: 6, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:14.370697Z”, “start_time”: “2020-10-07T15:26:14.356789Z” } }, “outputs”: [ { “data”: { “text/html”: [ “&lt;div&gt; n”, “ n”, “&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt; n”, “ &lt;thead&gt; n”, “ &lt;tr style=&quot;text-align: right;&quot;&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;LSOA code (2011)&lt;/th&gt; n”, “ &lt;th&gt;LSOA name (2011)&lt;/th&gt; n”, “ &lt;th&gt;Local Authority District code (2019)&lt;/th&gt; n”, “ &lt;th&gt;Local Authority District name (2019)&lt;/th&gt; n”, “ &lt;th&gt;Index of Multiple Deprivation (IMD) Rank&lt;/th&gt; n”, “ &lt;th&gt;Index of Multiple Deprivation (IMD) Decile&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/thead&gt; n”, “ &lt;tbody&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;17759&lt;/th&gt; n”, “ &lt;td&gt;E01018293&lt;/td&gt; n”, “ &lt;td&gt;South Cambridgeshire 012B&lt;/td&gt; n”, “ &lt;td&gt;E07000012&lt;/td&gt; n”, “ &lt;td&gt;South Cambridgeshire&lt;/td&gt; n”, “ &lt;td&gt;32840&lt;/td&gt; n”, “ &lt;td&gt;10&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;15715&lt;/th&gt; n”, “ &lt;td&gt;E01016187&lt;/td&gt; n”, “ &lt;td&gt;Bracknell Forest 002D&lt;/td&gt; n”, “ &lt;td&gt;E06000036&lt;/td&gt; n”, “ &lt;td&gt;Bracknell Forest&lt;/td&gt; n”, “ &lt;td&gt;32841&lt;/td&gt; n”, “ &lt;td&gt;10&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;30976&lt;/th&gt; n”, “ &lt;td&gt;E01031773&lt;/td&gt; n”, “ &lt;td&gt;Mid Sussex 008D&lt;/td&gt; n”, “ &lt;td&gt;E07000228&lt;/td&gt; n”, “ &lt;td&gt;Mid Sussex&lt;/td&gt; n”, “ &lt;td&gt;32842&lt;/td&gt; n”, “ &lt;td&gt;10&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;26986&lt;/th&gt; n”, “ &lt;td&gt;E01027699&lt;/td&gt; n”, “ &lt;td&gt;Harrogate 021A&lt;/td&gt; n”, “ &lt;td&gt;E07000165&lt;/td&gt; n”, “ &lt;td&gt;Harrogate&lt;/td&gt; n”, “ &lt;td&gt;32843&lt;/td&gt; n”, “ &lt;td&gt;10&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;17268&lt;/th&gt; n”, “ &lt;td&gt;E01017787&lt;/td&gt; n”, “ &lt;td&gt;Chiltern 005E&lt;/td&gt; n”, “ &lt;td&gt;E07000005&lt;/td&gt; n”, “ &lt;td&gt;Chiltern&lt;/td&gt; n”, “ &lt;td&gt;32844&lt;/td&gt; n”, “ &lt;td&gt;10&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/tbody&gt; n”, “&lt;/table&gt; n”, “&lt;/div&gt;” ], “text/plain”: [ “ LSOA code (2011) LSOA name (2011) n”, “17759 E01018293 South Cambridgeshire 012B n”, “15715 E01016187 Bracknell Forest 002D n”, “30976 E01031773 Mid Sussex 008D n”, “26986 E01027699 Harrogate 021A n”, “17268 E01017787 Chiltern 005E n”, “ n”, “ Local Authority District code (2019) n”, “17759 E07000012 n”, “15715 E06000036 n”, “30976 E07000228 n”, “26986 E07000165 n”, “17268 E07000005 n”, “ n”, “ Local Authority District name (2019) n”, “17759 South Cambridgeshire n”, “15715 Bracknell Forest n”, “30976 Mid Sussex n”, “26986 Harrogate n”, “17268 Chiltern n”, “ n”, “ Index of Multiple Deprivation (IMD) Rank n”, “17759 32840 n”, “15715 32841 n”, “30976 32842 n”, “26986 32843 n”, “17268 32844 n”, “ n”, “ Index of Multiple Deprivation (IMD) Decile n”, “17759 10 n”, “15715 10 n”, “30976 10 n”, “26986 10 n”, “17268 10 “ ] }, “execution_count”: 6, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “imd_df.sort_values(by=’Index of Multiple Deprivation (IMD) Rank’).tail()” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Derive Mean IMD Decile n”, “ n” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “At this point we want to join the two datasets together in order to explore the relationship between our two key metrics. n”, “ n”, “A problem is that the index of multiple deprivation comes with a geographical granularity at the LSOA level, whilst the COVID-19 mortality counts come with a geographical granularity at the Local Authority District (LAD) level. To complicate things, for each LAD there are generally multiple LSOAs, each with different indexes of multiple deprivation. For more information about the different geographical regions in the UK, read this. n”, “ n”, “We need to aggregate the LSOAs into LADs by averaging out the indexes of multiple deprivation. First let’s write some functions to help us.” ] }, { “cell_type”: “code”, “execution_count”: 7, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:14.375680Z”, “start_time”: “2020-10-07T15:26:14.372220Z” } }, “outputs”: [], “source”: [ “def get_mean_IMD_rank(LAD_code): n”, “ # select relevant LSOAs n”, “ LSOAs = imd_df[imd_df[‘Local Authority District code (2019)’] == LAD_code] n”, “ n”, “ # calculate mean IMD rank n”, “ mean_IMD_rank = round(LSOAs[‘Index of Multiple Deprivation (IMD) Rank’].mean(), 2) n”, “ std_IMD_rank = round(LSOAs[‘Index of Multiple Deprivation (IMD) Rank’].std(), 2) n”, “ n”, “ return mean_IMD_rank, std_IMD_rank n”, “ n”, “def get_mean_IMD_decile(LAD_code): n”, “ # select relevant LSOAs n”, “ LSOAs = imd_df[imd_df[‘Local Authority District code (2019)’] == LAD_code] n”, “ n”, “ # calculate mean IMD rank n”, “ mean_IMD_decile = round(LSOAs[‘Index of Multiple Deprivation (IMD) Decile’].mean(), 2) n”, “ std_IMD_decile = round(LSOAs[‘Index of Multiple Deprivation (IMD) Decile’].std(), 2) n”, “ n”, “ return mean_IMD_decile, std_IMD_decile” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Now we can use these functions to calculate the mean IMD decile in each Local Authority District.” ] }, { “cell_type”: “code”, “execution_count”: 8, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:15.253845Z”, “start_time”: “2020-10-07T15:26:14.379029Z” } }, “outputs”: [], “source”: [ “LAD_codes = imd_df[‘Local Authority District code (2019)’].unique() n”, “#mean_IMD_rank, std_IMD_rank = np.vectorize(get_mean_IMD_rank)(LAD_codes) n”, “mean_IMD_decile, std_IMD_decile = np.vectorize(get_mean_IMD_decile)(LAD_codes) n”, “ n”, “LAD_df = pd.DataFrame({‘LAD Code’: LAD_codes, n”, “ ‘LAD Name’: imd_df[‘Local Authority District name (2019)’].unique(), n”, “ #’Mean IMD Rank’: mean_IMD_rank, n”, “ #’Std IMD Rank’ : std_IMD_rank, n”, “ ‘Mean IMD decile’: mean_IMD_decile, n”, “ ‘Std IMD decile’: std_IMD_decile}) n”, “ n”, “LAD_df = LAD_df.set_index(‘LAD Code’)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Let’s make a quick histogram of the mean IMD decile.” ] }, { “cell_type”: “code”, “execution_count”: 9, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:15.420516Z”, “start_time”: “2020-10-07T15:26:15.256607Z” } }, “outputs”: [ { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 432x288 with 1 Axes&gt;” ] }, “metadata”: {}, “output_type”: “display_data” } ], “source”: [ “LAD_df[‘Mean IMD decile’].hist(range=(1,11), bins=10) n”, “plt.xlabel(‘Mean IMD Decile’) n”, “plt.ylabel(‘Count’) n”, “plt.show()” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “It should be noted that we lose some information when averaging the IMD ranks in this way. The central region of the distribution is relatively flat, and so we cannot differentiate well between LADs in this region. n”, “ n”, “Notice there are no Local Authority Districts that have a mean IMD decile of 1 or 10. This is due to the presence of variance inside each Local Authority District. For example, there is no single LAD whose constituent LSOAs all have a IMD deciles of 1 (or 10). See the table below for the maximum and minimum mean IMD deciles. Note that Blackpool, the most deprived (on average) LAD in England, has a mean IMD decile of 2.41. This demonstrates that this LAD has some LSOAs that are not in the most deprived deciles. The opposite is true for the least deprived areas. The &quot;Std IMD decile&quot; column in the below table shows the level of variation of the IMD (measured by the standard deviation) within each LAD.” ] }, { “cell_type”: “code”, “execution_count”: 10, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:15.432797Z”, “start_time”: “2020-10-07T15:26:15.422767Z” } }, “outputs”: [ { “data”: { “text/html”: [ “&lt;div&gt; n”, “ n”, “&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt; n”, “ &lt;thead&gt; n”, “ &lt;tr style=&quot;text-align: right;&quot;&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;LAD Name&lt;/th&gt; n”, “ &lt;th&gt;Mean IMD decile&lt;/th&gt; n”, “ &lt;th&gt;Std IMD decile&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;LAD Code&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/thead&gt; n”, “ &lt;tbody&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;E06000009&lt;/th&gt; n”, “ &lt;td&gt;Blackpool&lt;/td&gt; n”, “ &lt;td&gt;2.41&lt;/td&gt; n”, “ &lt;td&gt;1.58&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;E08000003&lt;/th&gt; n”, “ &lt;td&gt;Manchester&lt;/td&gt; n”, “ &lt;td&gt;2.54&lt;/td&gt; n”, “ &lt;td&gt;1.84&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;E08000011&lt;/th&gt; n”, “ &lt;td&gt;Knowsley&lt;/td&gt; n”, “ &lt;td&gt;2.56&lt;/td&gt; n”, “ &lt;td&gt;1.91&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;E09000002&lt;/th&gt; n”, “ &lt;td&gt;Barking and Dagenham&lt;/td&gt; n”, “ &lt;td&gt;2.68&lt;/td&gt; n”, “ &lt;td&gt;1.01&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;E09000012&lt;/th&gt; n”, “ &lt;td&gt;Hackney&lt;/td&gt; n”, “ &lt;td&gt;2.74&lt;/td&gt; n”, “ &lt;td&gt;1.11&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;…&lt;/th&gt; n”, “ &lt;td&gt;…&lt;/td&gt; n”, “ &lt;td&gt;…&lt;/td&gt; n”, “ &lt;td&gt;…&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;E07000155&lt;/th&gt; n”, “ &lt;td&gt;South Northamptonshire&lt;/td&gt; n”, “ &lt;td&gt;8.78&lt;/td&gt; n”, “ &lt;td&gt;1.32&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;E07000176&lt;/th&gt; n”, “ &lt;td&gt;Rushcliffe&lt;/td&gt; n”, “ &lt;td&gt;8.82&lt;/td&gt; n”, “ &lt;td&gt;1.58&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;E07000005&lt;/th&gt; n”, “ &lt;td&gt;Chiltern&lt;/td&gt; n”, “ &lt;td&gt;8.86&lt;/td&gt; n”, “ &lt;td&gt;1.51&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;E06000041&lt;/th&gt; n”, “ &lt;td&gt;Wokingham&lt;/td&gt; n”, “ &lt;td&gt;9.27&lt;/td&gt; n”, “ &lt;td&gt;1.43&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;E07000089&lt;/th&gt; n”, “ &lt;td&gt;Hart&lt;/td&gt; n”, “ &lt;td&gt;9.39&lt;/td&gt; n”, “ &lt;td&gt;1.08&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/tbody&gt; n”, “&lt;/table&gt; n”, “&lt;p&gt;317 rows × 3 columns&lt;/p&gt; n”, “&lt;/div&gt;” ], “text/plain”: [ “ LAD Name Mean IMD decile Std IMD decile n”, “LAD Code n”, “E06000009 Blackpool 2.41 1.58 n”, “E08000003 Manchester 2.54 1.84 n”, “E08000011 Knowsley 2.56 1.91 n”, “E09000002 Barking and Dagenham 2.68 1.01 n”, “E09000012 Hackney 2.74 1.11 n”, “… … … … n”, “E07000155 South Northamptonshire 8.78 1.32 n”, “E07000176 Rushcliffe 8.82 1.58 n”, “E07000005 Chiltern 8.86 1.51 n”, “E06000041 Wokingham 9.27 1.43 n”, “E07000089 Hart 9.39 1.08 n”, “ n”, “[317 rows x 3 columns]” ] }, “execution_count”: 10, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “LAD_df.sort_values(by=’Mean IMD decile’)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Derive Age Standardisation Weight n”, “ n”, “To account for the different population sizes in the different Local Area Districts, we want to use a mortality rate rather than an overall count. When we do this we convert a count into a rate per 100,000 people. Furthermore, we want to account for differences in the age distributions of the different LADs in order to make a valid comparison between the different geographic areas. An age standardised rate allows for this comparison. Ideally we would calculate this rate directly from the data, but as our mortality over time dataset does not contain information about age, we instead will need to extract a standardisation factor from a different dataset. n”, “ n”, “The dataset we will use to do this comes from the ONS study on COVID-19 and deprivation. We will use it to derive a standardisation factor which will allow us to convert our mortality counts into an age and population standardise mortality rate. This mortality rate is a European standard (2013 ESP). As we mentioned, we cannot calculate the factor directly as our mortality over time dataset does not include age information, so this reverse engineering is the best we can do. n”, “ n”, “For more information on how the mortality rate is calculated, see here. Simply put, this is the formula that we are assuming approximates the relationship between the age standardised rate and the mortality count: n”, “ n”, “ n&quot;, &quot;age standardised mortality rate = [standardisation factor] * [mortality count] n&quot;, &quot; n”, “ n”, “⚠️ The above procedure is not ideal because it assumes that the distribution of ages of those who died inside each Local Area District is constant in time, and therefore the standardisation factor we derive in one dataset (which doesn’t have information about time) can be applied to the other (which has information about time).” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “First, let’s download the data.” ] }, { “cell_type”: “code”, “execution_count”: 11, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:16.493559Z”, “start_time”: “2020-10-07T15:26:15.434235Z” } }, “outputs”: [], “source”: [ “# download the ONS data from the deprivation study n”, “url = ‘https://www.ons.gov.uk/file?uri=%2fpeoplepopulationandcommunity%2fbirthsdeathsandmarriages%2fdeaths%2fdatasets%2fdeathsinvolvingcovid19bylocalareaanddeprivation%2f1march2020to17april2020/referencetablesdraft.xlsx’ n”, “ n”, “# specify filename n”, “filename = ‘ONS_age_standarisation_April2020.xlsx’ n”, “ n”, “# construct file path n”, “filepath = os.path.join(downloaded_data_dir, filename) n”, “ n”, “# download and save file at the specified URL n”, “download_file(url, filepath) n”, “ n”, “# read the relevant sheet n”, “age_rate_df = pd.read_excel(filepath, sheet_name=’Table 2’, header=3)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Next, we can do some minor selection and reformatting of the DataFrame.” ] }, { “cell_type”: “code”, “execution_count”: 12, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:16.515795Z”, “start_time”: “2020-10-07T15:26:16.495699Z” } }, “outputs”: [ { “data”: { “text/html”: [ “&lt;div&gt; n”, “ n”, “&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt; n”, “ &lt;thead&gt; n”, “ &lt;tr style=&quot;text-align: right;&quot;&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;Sex&lt;/th&gt; n”, “ &lt;th&gt;Geography type&lt;/th&gt; n”, “ &lt;th&gt;LAD Code&lt;/th&gt; n”, “ &lt;th&gt;Area name&lt;/th&gt; n”, “ &lt;th&gt;All causes Deaths&lt;/th&gt; n”, “ &lt;th&gt;All causes Rate&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;All causes Lower CI&lt;/th&gt; n”, “ &lt;th&gt;All causes Upper CI&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;COVID-19 Deaths&lt;/th&gt; n”, “ &lt;th&gt;COVID-19 Rate&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;COVID-19 Lower CI&lt;/th&gt; n”, “ &lt;th&gt;COVID-19 Upper CI&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/thead&gt; n”, “ &lt;tbody&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;1&lt;/th&gt; n”, “ &lt;td&gt;Persons&lt;/td&gt; n”, “ &lt;td&gt;Unitary Authority&lt;/td&gt; n”, “ &lt;td&gt;E06000001&lt;/td&gt; n”, “ &lt;td&gt;Hartlepool&lt;/td&gt; n”, “ &lt;td&gt;154&lt;/td&gt; n”, “ &lt;td&gt;170.7&lt;/td&gt; n”, “ &lt;td&gt;NaN&lt;/td&gt; n”, “ &lt;td&gt;143.5&lt;/td&gt; n”, “ &lt;td&gt;197.8&lt;/td&gt; n”, “ &lt;td&gt;NaN&lt;/td&gt; n”, “ &lt;td&gt;29&lt;/td&gt; n”, “ &lt;td&gt;31&lt;/td&gt; n”, “ &lt;td&gt;NaN&lt;/td&gt; n”, “ &lt;td&gt;20.7&lt;/td&gt; n”, “ &lt;td&gt;44.5&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;2&lt;/th&gt; n”, “ &lt;td&gt;Persons&lt;/td&gt; n”, “ &lt;td&gt;Unitary Authority&lt;/td&gt; n”, “ &lt;td&gt;E06000002&lt;/td&gt; n”, “ &lt;td&gt;Middlesbrough&lt;/td&gt; n”, “ &lt;td&gt;289&lt;/td&gt; n”, “ &lt;td&gt;256&lt;/td&gt; n”, “ &lt;td&gt;NaN&lt;/td&gt; n”, “ &lt;td&gt;226.1&lt;/td&gt; n”, “ &lt;td&gt;286&lt;/td&gt; n”, “ &lt;td&gt;NaN&lt;/td&gt; n”, “ &lt;td&gt;89&lt;/td&gt; n”, “ &lt;td&gt;79&lt;/td&gt; n”, “ &lt;td&gt;NaN&lt;/td&gt; n”, “ &lt;td&gt;63.2&lt;/td&gt; n”, “ &lt;td&gt;97.6&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;3&lt;/th&gt; n”, “ &lt;td&gt;Persons&lt;/td&gt; n”, “ &lt;td&gt;Unitary Authority&lt;/td&gt; n”, “ &lt;td&gt;E06000003&lt;/td&gt; n”, “ &lt;td&gt;Redcar and Cleveland&lt;/td&gt; n”, “ &lt;td&gt;215&lt;/td&gt; n”, “ &lt;td&gt;142.6&lt;/td&gt; n”, “ &lt;td&gt;NaN&lt;/td&gt; n”, “ &lt;td&gt;123.5&lt;/td&gt; n”, “ &lt;td&gt;161.8&lt;/td&gt; n”, “ &lt;td&gt;NaN&lt;/td&gt; n”, “ &lt;td&gt;40&lt;/td&gt; n”, “ &lt;td&gt;26.5&lt;/td&gt; n”, “ &lt;td&gt;NaN&lt;/td&gt; n”, “ &lt;td&gt;18.9&lt;/td&gt; n”, “ &lt;td&gt;36.2&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;4&lt;/th&gt; n”, “ &lt;td&gt;Persons&lt;/td&gt; n”, “ &lt;td&gt;Unitary Authority&lt;/td&gt; n”, “ &lt;td&gt;E06000004&lt;/td&gt; n”, “ &lt;td&gt;Stockton-on-Tees&lt;/td&gt; n”, “ &lt;td&gt;297&lt;/td&gt; n”, “ &lt;td&gt;167&lt;/td&gt; n”, “ &lt;td&gt;NaN&lt;/td&gt; n”, “ &lt;td&gt;147.8&lt;/td&gt; n”, “ &lt;td&gt;186.1&lt;/td&gt; n”, “ &lt;td&gt;NaN&lt;/td&gt; n”, “ &lt;td&gt;38&lt;/td&gt; n”, “ &lt;td&gt;21&lt;/td&gt; n”, “ &lt;td&gt;NaN&lt;/td&gt; n”, “ &lt;td&gt;14.8&lt;/td&gt; n”, “ &lt;td&gt;28.9&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;5&lt;/th&gt; n”, “ &lt;td&gt;Persons&lt;/td&gt; n”, “ &lt;td&gt;Unitary Authority&lt;/td&gt; n”, “ &lt;td&gt;E06000005&lt;/td&gt; n”, “ &lt;td&gt;Darlington&lt;/td&gt; n”, “ &lt;td&gt;169&lt;/td&gt; n”, “ &lt;td&gt;151.5&lt;/td&gt; n”, “ &lt;td&gt;NaN&lt;/td&gt; n”, “ &lt;td&gt;128.6&lt;/td&gt; n”, “ &lt;td&gt;174.4&lt;/td&gt; n”, “ &lt;td&gt;NaN&lt;/td&gt; n”, “ &lt;td&gt;26&lt;/td&gt; n”, “ &lt;td&gt;22.9&lt;/td&gt; n”, “ &lt;td&gt;NaN&lt;/td&gt; n”, “ &lt;td&gt;15&lt;/td&gt; n”, “ &lt;td&gt;33.7&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/tbody&gt; n”, “&lt;/table&gt; n”, “&lt;/div&gt;” ], “text/plain”: [ “ Sex Geography type LAD Code Area name n”, “1 Persons Unitary Authority E06000001 Hartlepool n”, “2 Persons Unitary Authority E06000002 Middlesbrough n”, “3 Persons Unitary Authority E06000003 Redcar and Cleveland n”, “4 Persons Unitary Authority E06000004 Stockton-on-Tees n”, “5 Persons Unitary Authority E06000005 Darlington n”, “ n”, “ All causes Deaths All causes Rate All causes Lower CI n”, “1 154 170.7 NaN 143.5 n”, “2 289 256 NaN 226.1 n”, “3 215 142.6 NaN 123.5 n”, “4 297 167 NaN 147.8 n”, “5 169 151.5 NaN 128.6 n”, “ n”, “ All causes Upper CI COVID-19 Deaths COVID-19 Rate n”, “1 197.8 NaN 29 31 NaN n”, “2 286 NaN 89 79 NaN n”, “3 161.8 NaN 40 26.5 NaN n”, “4 186.1 NaN 38 21 NaN n”, “5 174.4 NaN 26 22.9 NaN n”, “ n”, “ COVID-19 Lower CI COVID-19 Upper CI n”, “1 20.7 44.5 n”, “2 63.2 97.6 n”, “3 18.9 36.2 n”, “4 14.8 28.9 n”, “5 15 33.7 “ ] }, “execution_count”: 12, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# data if given for many categories and regios, lets choose the inclusive gender, and the unitary authority levels n”, “age_rate_persons_df = age_rate_df[age_rate_df[‘Sex’] == ‘Persons’] n”, “ n”, “# rename columns n”, “age_rate_persons_df.columns = [‘Sex’, ‘Geography type’, ‘LAD Code’, ‘Area name’, ‘All causes Deaths’, n”, “ ‘All causes Rate’,’’ ,’All causes Lower CI’, ‘All causes Upper CI’,’’ ,’COVID-19 Deaths’, n”, “ ‘COVID-19 Rate’, ‘’,’COVID-19 Lower CI’, ‘COVID-19 Upper CI’ ] n”, “ n”, “# remove anomalous row (Isles of Scilly) without numerical data n”, “age_rate_persons_df = age_rate_persons_df[age_rate_persons_df[‘All causes Rate’] != ‘:’] n”, “age_rate_persons_df = age_rate_persons_df[age_rate_persons_df[‘COVID-19 Rate’] != ‘:’] n”, “ n”, “age_rate_persons_df.head()” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “ n”, “Let us now calculate the factor by which we need to multiply the count of deaths to derive the age-standardised mortality rate per 100,000 habitants.” ] }, { “cell_type”: “code”, “execution_count”: 13, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:16.526334Z”, “start_time”: “2020-10-07T15:26:16.517739Z” } }, “outputs”: [], “source”: [ “# derive standardisation factors n”, “age_rate_persons_df[‘All causes rate factor’] = ( n”, “ age_rate_persons_df[‘All causes Rate’] / age_rate_persons_df[‘All causes Deaths’] ) n”, “ n”, “age_rate_persons_df[‘COVID-19 rate factor’] = ( n”, “ age_rate_persons_df[‘COVID-19 Rate’] / age_rate_persons_df[‘COVID-19 Deaths’] ) n”, “ n”, “# drop columns n”, “age_rate_persons_df = age_rate_persons_df[[‘LAD Code’, ‘All causes rate factor’, ‘COVID-19 rate factor’]]” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “We can merge this into the previous DataFrame so all the information is accessible in one place.” ] }, { “cell_type”: “code”, “execution_count”: 14, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:16.536486Z”, “start_time”: “2020-10-07T15:26:16.528479Z” } }, “outputs”: [], “source”: [ “LAD_df = LAD_df.reset_index() n”, “LAD_df = LAD_df.merge(age_rate_persons_df, on=’LAD Code’, how=’inner’) n”, “LAD_df = LAD_df.set_index(‘LAD Code’)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Finally, let’s save the standardisation factors for each LAD, stored in the DataFrame LAD_df, so that we can easily use them later. “ ] }, { “cell_type”: “code”, “execution_count”: 15, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:16.544015Z”, “start_time”: “2020-10-07T15:26:16.538016Z” } }, “outputs”: [], “source”: [ “# create filename n”, “LAD_df_filename = ‘Local_Authority_District_Lookup.csv’ n”, “LAD_df_filepath = os.path.join(derived_data_dirname, LAD_df_filename) n”, “ n”, “# write to csv n”, “LAD_df.to_csv(LAD_df_filepath, index=False)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Mortality Counts n”, “ n”, “Now we are ready to download the main dataset that we will be analysing: the number of COVID-19 and non COVID-19 deaths across time and place.” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Download and Format” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Let’s download the ONS dataset containing mortality counts by week and Local Authority District.” ] }, { “cell_type”: “code”, “execution_count”: 16, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:23.822117Z”, “start_time”: “2020-10-07T15:26:16.545869Z” } }, “outputs”: [], “source”: [ “# specify URL n”, “url = ‘https://www.ons.gov.uk/file?uri=%2fpeoplepopulationandcommunity%2fhealthandsocialcare%2fcausesofdeath%2fdatasets%2fdeathregistrationsandoccurrencesbylocalauthorityandhealthboard%2f2020/lahbtablesweek35.xlsx’ n”, “ n”, “# specify filename n”, “filename = ‘ONS_COVID_Mortality_Counts.xlsx’ n”, “ n”, “# construct file path n”, “filepath = os.path.join(downloaded_data_dir, filename) n”, “ n”, “# download and save file at the specified URL n”, “download_file(url, filepath)” ] }, { “cell_type”: “code”, “execution_count”: 17, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:47.730280Z”, “start_time”: “2020-10-07T15:26:23.824144Z” } }, “outputs”: [], “source”: [ “# specify the sheet of the excel file we want to read n”, “sheet_name = ‘Occurrences - All data’ n”, “ n”, “# read the sheet into a pandas DataFrame n”, “mortality_df = pd.read_excel(filepath, sheet_name=sheet_name, header=3)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Let’s quickly check if all the LADs are represented in both datasets so that we can join the IMD rank with the mortality information for each LAD.” ] }, { “cell_type”: “code”, “execution_count”: 18, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:47.765513Z”, “start_time”: “2020-10-07T15:26:47.732109Z” } }, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “There are 4 codes in the IMD dataset but not in the mortality dataset. n”, “There are 30 codes in the mortality dataset but not in the IMD dataset. n” ] } ], “source”: [ “not_in_imd = set(mortality_df[‘Area code’]) - set(imd_df[‘Local Authority District code (2019)’]) n”, “not_in_mortality = set(imd_df[‘Local Authority District code (2019)’]) - set(mortality_df[‘Area code’]) n”, “ n”, “print(‘There are’, len(not_in_mortality), ‘codes in the IMD dataset but not in the mortality dataset.’) n”, “print(‘There are’, len(not_in_imd), ‘codes in the mortality dataset but not in the IMD dataset.’)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “We have 346 LAD codes in the mortality data set, and only 317 in the IMD dataset. Upon closer inspection, it turned out that IMD dataset does not contain any Welsh entries (as the IMD ranking is defined for England only). Additionally, the mortality dataset contains a single entry for Buckinghamshire, a new unitary authority in 2020 (E06000060). The IMD dataset, meanwhile, contains 4 LAD codes for Buckinghamshire. We will drop these anomalous locations from the analysis for now. “ ] }, { “cell_type”: “code”, “execution_count”: 19, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:47.792667Z”, “start_time”: “2020-10-07T15:26:47.768318Z” } }, “outputs”: [], “source”: [ “# extract those LAD codes which are present in the mortality dataset but not the IMD dataset (Wales) n”, “missing_LAD_codes_df = mortality_df[~mortality_df[‘Area code’].isin(imd_df[‘Local Authority District code (2019)’])] n”, “missing_LAD_codes = missing_LAD_codes_df[‘Area code’].unique() n”, “ n”, “# filter by common LAD codes n”, “mortality_df = mortality_df[~mortality_df[‘Area code’].isin(missing_LAD_codes)]” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Furthermore, the age standardisation factor derived previously was not able to be derived for one LAD (the Isles of Scilly). Let’s drop that now too to avoid any problems later down the line.” ] }, { “cell_type”: “code”, “execution_count”: 20, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:47.807995Z”, “start_time”: “2020-10-07T15:26:47.794017Z” } }, “outputs”: [], “source”: [ “# remove LADs from the mortality DataFrame if we do not have an entry for them in the LAD_df n”, “mortality_df = mortality_df[mortality_df[‘Area code’].isin(LAD_df.index)]” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Finally, since we are interested in looking at the effect of COVID-19 and the lockdown policies on the working population, we can remove deaths that took place in care homes or hospices.” ] }, { “cell_type”: “code”, “execution_count”: 21, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:47.833751Z”, “start_time”: “2020-10-07T15:26:47.810372Z” } }, “outputs”: [], “source”: [ “# select only deaths outside of care homes and hospices n”, “mortality_df = mortality_df[(mortality_df[‘Place of death’] != ‘Care home’) &amp; n”, “ (mortality_df[‘Place of death’] != ‘Hospice’)] n”, “ n”, “# to instead select only deaths in care homes or hospices, use this line: n”, “#mortality_df = mortality_df[(mortality_df[‘Place of death’]==’Care home’) | n”, “# (mortality_df[‘Place of death’]==’Hospice’)]” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “The mortality data starts from Wednesday 1st Jan 2020. Let’s use that to convert the supplied week numbers into a date.” ] }, { “cell_type”: “code”, “execution_count”: 22, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:49.130615Z”, “start_time”: “2020-10-07T15:26:47.835238Z” } }, “outputs”: [], “source”: [ “# first day of 2020 is a Wednesday n”, “mortality_df[‘Date’] = [datetime.strptime(f’2020 {n-1} 3’, ‘%Y %W %w’).strftime(‘%Y-%m-%d’) n”, “ for n in mortality_df[‘Week number’]] n”, “ n”, “# drop week number column n”, “mortality_df = mortality_df.drop(columns=’Week number’)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Finally, we can take a random sample of 5 rows from the DataFrame to check everything looks okay, and to get an idea of its structure.” ] }, { “cell_type”: “code”, “execution_count”: 23, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:49.147215Z”, “start_time”: “2020-10-07T15:26:49.136196Z” } }, “outputs”: [ { “data”: { “text/html”: [ “&lt;div&gt; n”, “ n”, “&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt; n”, “ &lt;thead&gt; n”, “ &lt;tr style=&quot;text-align: right;&quot;&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;Area code&lt;/th&gt; n”, “ &lt;th&gt;Geography type&lt;/th&gt; n”, “ &lt;th&gt;Area name&lt;/th&gt; n”, “ &lt;th&gt;Cause of death&lt;/th&gt; n”, “ &lt;th&gt;Place of death&lt;/th&gt; n”, “ &lt;th&gt;Number of deaths&lt;/th&gt; n”, “ &lt;th&gt;Date&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/thead&gt; n”, “ &lt;tbody&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;59338&lt;/th&gt; n”, “ &lt;td&gt;E07000123&lt;/td&gt; n”, “ &lt;td&gt;Local Authority&lt;/td&gt; n”, “ &lt;td&gt;Preston&lt;/td&gt; n”, “ &lt;td&gt;COVID 19&lt;/td&gt; n”, “ &lt;td&gt;Hospital&lt;/td&gt; n”, “ &lt;td&gt;10&lt;/td&gt; n”, “ &lt;td&gt;2020-04-08&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;19259&lt;/th&gt; n”, “ &lt;td&gt;E07000234&lt;/td&gt; n”, “ &lt;td&gt;Local Authority&lt;/td&gt; n”, “ &lt;td&gt;Bromsgrove&lt;/td&gt; n”, “ &lt;td&gt;COVID 19&lt;/td&gt; n”, “ &lt;td&gt;Other communal establishment&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;2020-01-29&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;66358&lt;/th&gt; n”, “ &lt;td&gt;E06000044&lt;/td&gt; n”, “ &lt;td&gt;Local Authority&lt;/td&gt; n”, “ &lt;td&gt;Portsmouth&lt;/td&gt; n”, “ &lt;td&gt;COVID 19&lt;/td&gt; n”, “ &lt;td&gt;Hospital&lt;/td&gt; n”, “ &lt;td&gt;10&lt;/td&gt; n”, “ &lt;td&gt;2020-04-22&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;46906&lt;/th&gt; n”, “ &lt;td&gt;E07000116&lt;/td&gt; n”, “ &lt;td&gt;Local Authority&lt;/td&gt; n”, “ &lt;td&gt;Tunbridge Wells&lt;/td&gt; n”, “ &lt;td&gt;COVID 19&lt;/td&gt; n”, “ &lt;td&gt;Hospital&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;2020-03-18&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;44191&lt;/th&gt; n”, “ &lt;td&gt;E08000008&lt;/td&gt; n”, “ &lt;td&gt;Local Authority&lt;/td&gt; n”, “ &lt;td&gt;Tameside&lt;/td&gt; n”, “ &lt;td&gt;COVID 19&lt;/td&gt; n”, “ &lt;td&gt;Elsewhere&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;2020-03-11&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/tbody&gt; n”, “&lt;/table&gt; n”, “&lt;/div&gt;” ], “text/plain”: [ “ Area code Geography type Area name Cause of death n”, “59338 E07000123 Local Authority Preston COVID 19 n”, “19259 E07000234 Local Authority Bromsgrove COVID 19 n”, “66358 E06000044 Local Authority Portsmouth COVID 19 n”, “46906 E07000116 Local Authority Tunbridge Wells COVID 19 n”, “44191 E08000008 Local Authority Tameside COVID 19 n”, “ n”, “ Place of death Number of deaths Date n”, “59338 Hospital 10 2020-04-08 n”, “19259 Other communal establishment 0 2020-01-29 n”, “66358 Hospital 10 2020-04-22 n”, “46906 Hospital 0 2020-03-18 n”, “44191 Elsewhere 0 2020-03-11 “ ] }, “execution_count”: 23, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “mortality_df.sample(n=5)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “If you want to reproduce the results from the initial ONS report, you can restrict the date ranges of the data by uncommenting these lines.” ] }, { “cell_type”: “code”, “execution_count”: 24, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:49.151374Z”, “start_time”: “2020-10-07T15:26:49.149766Z” } }, “outputs”: [], “source”: [ “#mortality_df = mortality_df[mortality_df[‘Date’] &gt; ‘2020-03-01’] n”, “#mortality_df = mortality_df[mortality_df[‘Date’] &lt; ‘2020-04-18’]” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “ n”, “## Download Local Area District to Region Lookup Table n”, “ n”, “As shown in the ONS report, a nice plot to make is the total number of mortalities in each region of England (a region is composed of many LADs). To do this, we need to know which region each LAD belongs. Let’s download this data now from the following website: https://geoportal.statistics.gov.uk/datasets/local-authority-district-to-region-april-2019-lookup-in-england.” ] }, { “cell_type”: “code”, “execution_count”: 25, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:49.693449Z”, “start_time”: “2020-10-07T15:26:49.152878Z” } }, “outputs”: [], “source”: [ “# specify URL n”, “url = ‘https://opendata.arcgis.com/datasets/3ba3daf9278f47daba0f561889c3521a_0.csv’ n”, “ n”, “# specify filename n”, “filename = ‘LAD_Code_Region_Lookup.csv’ n”, “ n”, “# construct file path n”, “filepath = os.path.join (downloaded_data_dir, filename) n”, “ n”, “# download and save file at the specified URL n”, “download_file(url, filepath) n”, “ n”, “# read the relevant sheet n”, “LAD_code_region_lookup_df = pd.read_csv(filepath, index_col=’FID’).set_index(‘LAD19CD’)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Taking a look at the data, we can see that the index &quot;LAD19CD&quot; contains our familiar LAD code, and the column &quot;RGN12NM&quot; gives us the name of the region in which that LAD is located. Perfect!” ] }, { “cell_type”: “code”, “execution_count”: 26, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:49.703158Z”, “start_time”: “2020-10-07T15:26:49.695661Z” } }, “outputs”: [ { “data”: { “text/html”: [ “&lt;div&gt; n”, “ n”, “&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt; n”, “ &lt;thead&gt; n”, “ &lt;tr style=&quot;text-align: right;&quot;&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;LAD19NM&lt;/th&gt; n”, “ &lt;th&gt;RGN19CD&lt;/th&gt; n”, “ &lt;th&gt;RGN19NM&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;LAD19CD&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/thead&gt; n”, “ &lt;tbody&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;E09000001&lt;/th&gt; n”, “ &lt;td&gt;City of London&lt;/td&gt; n”, “ &lt;td&gt;E12000007&lt;/td&gt; n”, “ &lt;td&gt;London&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;E06000054&lt;/th&gt; n”, “ &lt;td&gt;Wiltshire&lt;/td&gt; n”, “ &lt;td&gt;E12000009&lt;/td&gt; n”, “ &lt;td&gt;South West&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;E09000002&lt;/th&gt; n”, “ &lt;td&gt;Barking and Dagenham&lt;/td&gt; n”, “ &lt;td&gt;E12000007&lt;/td&gt; n”, “ &lt;td&gt;London&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;E09000003&lt;/th&gt; n”, “ &lt;td&gt;Barnet&lt;/td&gt; n”, “ &lt;td&gt;E12000007&lt;/td&gt; n”, “ &lt;td&gt;London&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;E09000004&lt;/th&gt; n”, “ &lt;td&gt;Bexley&lt;/td&gt; n”, “ &lt;td&gt;E12000007&lt;/td&gt; n”, “ &lt;td&gt;London&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/tbody&gt; n”, “&lt;/table&gt; n”, “&lt;/div&gt;” ], “text/plain”: [ “ LAD19NM RGN19CD RGN19NM n”, “LAD19CD n”, “E09000001 City of London E12000007 London n”, “E06000054 Wiltshire E12000009 South West n”, “E09000002 Barking and Dagenham E12000007 London n”, “E09000003 Barnet E12000007 London n”, “E09000004 Bexley E12000007 London” ] }, “execution_count”: 26, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “LAD_code_region_lookup_df.head()” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Split Data Into Different Time Periods n”, “ n”, “Now, the final step before we can really start our analysis is to split our dataset into different time periods. As mentioned in the introduction, we want to compare COVID-19 mortality before, during and after lockdown was in place. Within each time period, we sum over all deaths, and add the IMD decile for each LAD. Finally, we’ll also include Region information. n”, “ n”, “Let’s write a function to sum the mortality data over time to get the total number of deaths. Then, we’ll reformat the DataFrame to separate COVID-19 and non COVID-19 deaths. Finally, we’ll use the table downloaded in the previous section to get the Region name for each LAD. The function combines information from all the previous DataFrames and produces a DataFrame with everything we need to do our analysis. “ ] }, { “cell_type”: “code”, “execution_count”: 27, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:49.711554Z”, “start_time”: “2020-10-07T15:26:49.705521Z” } }, “outputs”: [], “source”: [ “def filter_date_and_aggregate(df, date_range=None): n”, “ &quot;&quot;&quot; n”, “ The function: n”, “ - Selects dates that are inside the supplied date range. n”, “ - Sums over time in this date range. n”, “ - Separates COVID-19 vs non COVID-19 deaths. n”, “ - Decorates rows with area and region name columns. n”, “ - Calculates the standardised mortality rate using previously calculated factors. n”, “ - Pulls in the mean IMD decile as previously calculated. n”, “ &quot;&quot;&quot; n”, “ n”, “ # filter dates n”, “ if date_range: n”, “ df = df[(df[‘Date’] &gt;= date_range[0]) &amp; (df[‘Date’] &lt; date_range[1])] n”, “ n”, “ # sum over time n”, “ df = df.groupby(by=[‘Area code’, ‘Cause of death’]).sum() n”, “ df = df.reset_index(level=[-1]) n”, “ n”, “ # seperate out all deaths and COVID deaths as their own columns n”, “ df = df.pivot(columns=’Cause of death’, values=’Number of deaths’) n”, “ df.columns.name = ‘‘ n”, “ n”, “ # rename columns n”, “ df = df.rename(columns={‘All causes’: ‘Total deaths’, ‘COVID 19’: ‘COVID deaths’}) n”, “ n”, “ # add non-COVID deaths as column n”, “ df[‘Non COVID deaths’] = df[‘Total deaths’] - df[‘COVID deaths’] n”, “ n”, “ # add area names n”, “ df[‘Area name’] = LAD_df.loc[df.index][‘LAD Name’] n”, “ n”, “ # add region names n”, “ df[‘Region name’] = LAD_code_region_lookup_df.loc[df.index][‘RGN19NM’] n”, “ n”, “ # Calculate the rate per 100k using the age-standardisation factor estimated previously n”, “ df[‘COVID-19 rate’] = (LAD_df.loc[df.index][‘COVID-19 rate factor’] * df[‘COVID deaths’]).astype(float) n”, “ df[‘All causes rate’] = (LAD_df.loc[df.index][‘All causes rate factor’] * df[‘Total deaths’]).astype(float) n”, “ n”, “ # import mean IMD rank n”, “ df[‘Mean IMD decile’] = LAD_df[‘Mean IMD decile’] n”, “ n”, “ return df” ] }, { “cell_type”: “code”, “execution_count”: 28, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:49.745740Z”, “start_time”: “2020-10-07T15:26:49.713297Z” } }, “outputs”: [], “source”: [ “# sum over &quot;Place of death&quot; column n”, “mortality_sum_df = mortality_df.groupby(by=[‘Area code’, ‘Date’, ‘Cause of death’]).sum().reset_index()” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “First, let’s agreggate the data without splitting into different time periods.” ] }, { “cell_type”: “code”, “execution_count”: 29, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:49.768407Z”, “start_time”: “2020-10-07T15:26:49.748365Z” } }, “outputs”: [], “source”: [ “# this line performs the agreggation step (summing mortality over time). n”, “# and also includes information about deprivation, no date filtering yet. n”, “total_deaths_df = filter_date_and_aggregate(mortality_sum_df)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Now we can split up the data into three periods. The first period is from January 1st to April 7th - 16 days from the beginning of lockdown. The second period runs from April 7th to June 1st - 16 days after the stay at home order was lifted. The final period runs from June 1st to August 28th. n”, “ n”, “We use a time delay of 16 days after key policy decisions to account for the time lag between onset of the disase and death. The number was taken from this study: https://www.bmj.com/content/368/bmj.m1091.” ] }, { “cell_type”: “code”, “execution_count”: 30, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:49.820827Z”, “start_time”: “2020-10-07T15:26:49.769881Z” } }, “outputs”: [], “source”: [ “# first date range n”, “first_date_range = (‘2020-01-01’, ‘2020-04-07’) n”, “first_df = filter_date_and_aggregate(mortality_sum_df, first_date_range) n”, “first_df[‘period’] = 1 n”, “ n”, “# second date range n”, “second_date_range = (‘2020-04-07’, ‘2020-06-01’) n”, “second_df = filter_date_and_aggregate(mortality_sum_df, second_date_range) n”, “second_df[‘period’] = 2 n”, “ n”, “# second date range n”, “third_date_range = (‘2020-06-01’, ‘2020-08-28’) n”, “third_df = filter_date_and_aggregate(mortality_sum_df, third_date_range) n”, “third_df[‘period’] = 3” ] }, { “cell_type”: “code”, “execution_count”: 31, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:49.826739Z”, “start_time”: “2020-10-07T15:26:49.822670Z” } }, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Total deaths in before lockdown period: t 6521 n”, “Total deaths in during lockdown period: t 24179 n”, “Total deaths in after lockdown period: t 3217 n” ] } ], “source”: [ “print(‘Total deaths in before lockdown period: t’, first_df[‘COVID deaths’].sum()) n”, “print(‘Total deaths in during lockdown period: t’, second_df[‘COVID deaths’].sum()) n”, “print(‘Total deaths in after lockdown period: t’, third_df[‘COVID deaths’].sum())” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Let’s also divide the rate by the number of days in each time period, which will give us the the age standardised mortality rate per day.” ] }, { “cell_type”: “code”, “execution_count”: 32, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:49.837719Z”, “start_time”: “2020-10-07T15:26:49.828702Z” } }, “outputs”: [], “source”: [ “def get_num_days(date_range): n”, “ d0 = datetime.strptime(date_range[1], ‘%Y-%m-%d’) n”, “ d1 = datetime.strptime(date_range[0], ‘%Y-%m-%d’) n”, “ return (d0 - d1).days n”, “ n”, “full_date_range = (‘2020-01-01’, ‘2020-08-28’) n”, “total_deaths_df[‘All causes rate’] = total_deaths_df[‘All causes rate’] / get_num_days(full_date_range) n”, “total_deaths_df[‘COVID-19 rate’] = total_deaths_df[‘COVID-19 rate’] / get_num_days(full_date_range) n”, “ n”, “first_df[‘All causes rate’] = first_df[‘All causes rate’] / get_num_days(first_date_range) n”, “first_df[‘COVID-19 rate’] = first_df[‘COVID-19 rate’] / get_num_days(first_date_range) n”, “ n”, “second_df[‘All causes rate’] = second_df[‘All causes rate’] / get_num_days(second_date_range) n”, “second_df[‘COVID-19 rate’] = second_df[‘COVID-19 rate’] / get_num_days(second_date_range) n”, “ n”, “third_df[‘All causes rate’] = third_df[‘All causes rate’] / get_num_days(third_date_range) n”, “third_df[‘COVID-19 rate’] = third_df[‘COVID-19 rate’] / get_num_days(third_date_range)” ] }, { “cell_type”: “code”, “execution_count”: 33, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:49.846021Z”, “start_time”: “2020-10-07T15:26:49.839057Z” } }, “outputs”: [], “source”: [ “# recombining with the additional column n”, “all_df = pd.concat([first_df,second_df, third_df])” ] }, { “cell_type”: “markdown”, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:15:52.837778Z”, “start_time”: “2020-10-07T15:15:52.834447Z” } }, “source”: [ “Now we are finished with all of the processing steps and we are ready for the fun part: analysing the data!” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Study #1 - Regional Mortality Counts &amp; Rates n”, “ n”, “Our first objective was to reproduce the ONS analysis to ensure that we have all the pieces we need to understand the problem. The first plots that we will replicate compare COVID-19 mortality across the different regions in England (Figures 1 &amp; 2 in the ONS analysis).” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Total Mortalities by Region n”, “ n”, “For Figure 1, we will produce a stacked bar chart showing the mortality count (split up into COVID-19 and non COVID-19 deaths) for each Region in England.” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Summing over region and sorting the values, we are almost ready to make the plot.” ] }, { “cell_type”: “code”, “execution_count”: 34, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:49.854030Z”, “start_time”: “2020-10-07T15:26:49.847976Z” } }, “outputs”: [], “source”: [ “# sum over LADs in each region n”, “total_deaths_by_region_df = total_deaths_df.groupby(by=’Region name’).sum() n”, “ n”, “# sort ascending n”, “total_deaths_by_region_df = total_deaths_by_region_df.sort_values(by=’Total deaths’, ascending=True)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Finally, let’s write the code to actually make the plot.” ] }, { “cell_type”: “code”, “execution_count”: 35, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:50.153223Z”, “start_time”: “2020-10-07T15:26:49.855386Z” } }, “outputs”: [ { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 504x720 with 1 Axes&gt;” ] }, “metadata”: {}, “output_type”: “display_data” } ], “source”: [ “# region names n”, “xs = total_deaths_by_region_df.index n”, “ n”, “# mortality counts n”, “non_covid_deaths = total_deaths_by_region_df[‘Non COVID deaths’] n”, “covid_deaths = total_deaths_by_region_df[‘COVID deaths’] n”, “ n”, “# set bar width n”, “width = 0.75 n”, “ n”, “# colors similar to ONS n”, “covid_color = (251/255, 213/255, 59/255, 0.9) n”, “noncovid_color = (25/255, 142/255, 188/255, 0.9) n”, “ n”, “# create a figure and plot data n”, “plt.figure(figsize=(7,10)) n”, “p1 = plt.barh(xs, covid_deaths, width, color=covid_color, label=’COVID-19 Deaths’) n”, “p2 = plt.barh(xs, non_covid_deaths, width, left=covid_deaths, color=noncovid_color, label=’Non COVID-19 Deaths’) n”, “ n”, “# label axes n”, “plt.xlabel(‘Deaths Since 01/01/2020’, fontsize=16) n”, “plt.ylabel(‘Region’, fontsize=16) n”, “plt.yticks(rotation=30) n”, “ n”, “# add vertical grid lines n”, “plt.gca().xaxis.grid(True, linestyle=’-‘, which=’major’, color=’grey’, alpha=.25) n”, “ n”, “# show legend and plot n”, “plt.legend(fontsize=14) n”, “plt.show()” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “There it is! A lot of work but now we can already begin to try and understand what this data is telling us. Here are some conclusions: n”, “- For all regions, the number of COVID-19 deaths is smaller than the number of non COVID-19 deaths. n”, “- The number of deaths varies a lot between different regions. This can be due to the fact that there are different numbers of people living in each region (for example, there are more people living in the South East than there are in the North East). On top of that, we know that older people have a higher risk of dying after contracting COVID-19, and as the age distributions are different for different regions, this can also affect the overall number of deaths.” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Standardised Mortality Rate by Region” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “To account for the varying population sizes and age distributions, let’s look at the age-standardised mortality rates per 100,000 people, standardised to the 2013 European Standard Population. Age-standardised mortality rates allow for differences in the age structure of populations and therefore allow valid comparisons to be made between geographical areas, the sexes and over time. t t t t t t t” ] }, { “cell_type”: “code”, “execution_count”: 36, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:50.163120Z”, “start_time”: “2020-10-07T15:26:50.155781Z” } }, “outputs”: [], “source”: [ “# calculate the mean rate per region and sort n”, “total_rates_df_by_region = total_deaths_df.groupby(by=’Region name’, as_index=False).agg(‘mean’) n”, “total_rates_df_by_region = total_rates_df_by_region.sort_values(by=’All causes rate’, ascending=True)” ] }, { “cell_type”: “code”, “execution_count”: 37, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:50.412404Z”, “start_time”: “2020-10-07T15:26:50.168506Z” } }, “outputs”: [ { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 504x720 with 1 Axes&gt;” ] }, “metadata”: {}, “output_type”: “display_data” } ], “source”: [ “# region names n”, “x_labels = total_rates_df_by_region[‘Region name’] n”, “xs = np.array(range(len(x_labels))) n”, “ n”, “# mortality counts n”, “non_covid_rate = total_rates_df_by_region[‘All causes rate’] n”, “covid_rate = total_rates_df_by_region[‘COVID-19 rate’] n”, “ n”, “# set bar width n”, “width = 0.4 n”, “ n”, “# create a figure and plot data n”, “plt.figure(figsize=(7,10)) n”, “p2 = plt.barh(xs+0.2, non_covid_rate, width, color=noncovid_color, label=’All Causes Mortality Rate’, tick_label=x_labels) n”, “p1 = plt.barh(xs-0.2, covid_rate, width, color=covid_color, label=’COVID-19 Mortality Rate’) n”, “ n”, “# label axes n”, “plt.xlabel(‘Age standardised mortality rate per 100,000 people per day since 01/01/2020’, fontsize=16) n”, “plt.ylabel(‘Region’, fontsize=16) n”, “plt.yticks(rotation=30) n”, “ n”, “# add vertical grid lines n”, “plt.gca().xaxis.grid(True, linestyle=’-‘, which=’major’, color=’grey’, alpha=.25) n”, “ n”, “# show legend and plot n”, “plt.legend(fontsize=14, loc=’lower right’) n”, “plt.show()” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Note that as we plot the rates, we switch from a stacked bar chart (showing counts of COVID-19 and non COVID-19 mortalities), to two bar charts side by side (showing the COVID-19 mortality rate, and the all causes mortality rate). Even with this caveat in mind, when looking at the chart we see it tells a very different story to the previous plot. For example, in the previous plot, the South East had the highest number of total deaths, but looking at the standardised rates in this plot we see that it is ranked second from the bottom. This shows that the raw mortality counts do not tell the whole story, and so we cannot rely solely on them to make meaningful comparisons between different Regions.” ] }, { “cell_type”: “markdown”, “metadata”: { “ExecuteTime”: { “end_time”: “2020-06-04T16:13:03.545307Z”, “start_time”: “2020-06-04T16:13:03.543118Z” } }, “source”: [ “# Study 2 - Mortality by Deprivation n”, “ n”, “We can now study the relationship between COVID-19 mortality and deprivation. To do this we will make some plots showing the standardised mortality rate as a function of the mean IMD decile for each LAD in England. Recall that the rate has been normalised by the number of days in each time period, so that they are comparable. n”, “ n”, “In the plots, you will see the $y$ axis labelled with &quot;Standardised Mortality Rate&quot;. In fact, this rate is the age standardised count of deaths observed per 100,000 people per day.” ] }, { “cell_type”: “code”, “execution_count”: 38, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:50.418310Z”, “start_time”: “2020-10-07T15:26:50.414454Z” } }, “outputs”: [], “source”: [ “# define a function that we can use to calculate the correlation and slope of a linear fit n”, “def get_corr_and_slope(xs, ys): n”, “ n”, “ # calculate the correlation coefficient n”, “ corr = round(pearsonr(xs, ys)[0], 2) n”, “ n”, “ # calcualte the slope of a linear fit n”, “ slope = round(np.polyfit(xs, ys, 1)[0], 2) n”, “ n”, “ return corr, slope” ] }, { “cell_type”: “markdown”, “metadata”: { “ExecuteTime”: { “end_time”: “2020-07-03T14:34:54.613699Z”, “start_time”: “2020-07-03T14:34:54.611615Z” } }, “source”: [ “## Comparing All Causes and COVID-19 Mortality Rates n”, “ n”, “To get started, let’s overlay the mortality rates for all causes of death and COVID-19 on the same plot.” ] }, { “cell_type”: “code”, “execution_count”: 39, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:51.129896Z”, “start_time”: “2020-10-07T15:26:50.420716Z” } }, “outputs”: [ { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 720x432 with 1 Axes&gt;” ] }, “metadata”: {}, “output_type”: “display_data” } ], “source”: [ “# plot formatting n”, “po = {‘s’: 10, ‘alpha’:0.5} n”, “ n”, “# select data n”, “IMD_decile = total_deaths_df[‘Mean IMD decile’] n”, “all_causes_rate = total_deaths_df[‘All causes rate’] n”, “covid_rate = total_deaths_df[‘COVID-19 rate’] n”, “ n”, “# calcualte correlations and slopes n”, “ac_stats = get_corr_and_slope(IMD_decile, all_causes_rate) n”, “c19_stats = get_corr_and_slope(IMD_decile, covid_rate) n”, “ n”, “# make plots n”, “plt.figure(figsize=(10,6)) n”, “sns.regplot(x=IMD_decile, y=all_causes_rate, label=f’All causes $r={ac_stats[0]}$’, scatter_kws=po) n”, “sns.regplot(x=IMD_decile, y=covid_rate, color=’red’, label=f’COVID-19 $r={c19_stats[0]}$’, scatter_kws=po) n”, “ n”, “# format plot n”, “plt.ylabel(‘Standardised Mortality Rate’, fontsize=14) n”, “plt.xlabel(‘Mean IMD Decile’, fontsize=14) n”, “plt.legend(fontsize=14); plt.ylim((0, 3.5)) n”, “plt.show()” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “In the plot legends, $r$ is the correlation coefficient. If you are unfamiliar with the concept of correlation, or want a refresher, take a look here. n”, “ n”, “Recall that the lower the mean IMD rank in each LAD, the more deprived the area is. There is a negative correlation between the standardised rate and the IMD decile, for both the all causes rate and the COVID-19 rate. The negative correlation tells us that in more deprived areas (those with a lower mean IMD decile), the standardised mortality rate is higher. n”, “ n”, “Note however that the strength of the correlations are quite different. COVID-19 appears to discriminate less based on social deprivation than all causes of death combined. This link between social deprivation and mortality has been previously observed - see discussions here and here.” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Time Periods n”, “ n”, “We are now finally ready to investigate the relationship between mortality and deprivation in the different periods of lockdown. The three periods we defined are: n”, “- Before lockdown: January 1st to April 7th n”, “- Duing lockdown: April 7th to June 1st n”, “- After lockdown: June 1st to August 28th n”, “ n”, “We will look at this relationship for all causes of death, and for COVID-19 deaths separately.” ] }, { “cell_type”: “markdown”, “metadata”: { “ExecuteTime”: { “end_time”: “2020-09-02T16:03:37.804098Z”, “start_time”: “2020-09-02T16:03:37.801347Z” } }, “source”: [ “### All Causes” ] }, { “cell_type”: “code”, “execution_count”: 40, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:52.253416Z”, “start_time”: “2020-10-07T15:26:51.132442Z” } }, “outputs”: [ { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 1152x360 with 3 Axes&gt;” ] }, “metadata”: {}, “output_type”: “display_data” } ], “source”: [ “ymax = 4.5 n”, “plt.figure(figsize=(16,5)) n”, “ n”, “# calcualte correlations and slopes n”, “pre_stats = get_corr_and_slope(first_df[‘Mean IMD decile’], first_df[‘All causes rate’]) n”, “dur_stats = get_corr_and_slope(second_df[‘Mean IMD decile’], second_df[‘All causes rate’]) n”, “pos_stats = get_corr_and_slope(third_df[‘Mean IMD decile’], third_df[‘All causes rate’]) n”, “ n”, “plt.subplot(131) n”, “plt.title(‘Before Lockdown’) n”, “sns.regplot(x=’Mean IMD decile’, y=’All causes rate’, data=first_df, label=f&quot;$r={pre_stats[0]}$&quot;, scatter_kws=po) n”, “plt.xlabel(‘Mean IMD Decile’, fontsize=12) n”, “plt.ylabel(‘All Causes Standardised Mortality Rate’, fontsize=12) n”, “plt.legend(); plt.ylim((0, ymax)) n”, “ n”, “plt.subplot(132) n”, “plt.title(‘During Lockdown’) n”, “sns.regplot(x=’Mean IMD decile’, y=’All causes rate’, data=second_df, label=f&quot;$r={dur_stats[0]}$&quot;, scatter_kws=po) n”, “plt.xlabel(‘Mean IMD Decile’, fontsize=12) n”, “plt.ylabel(‘All Causes Standardised Mortality Rate’, fontsize=12) n”, “plt.legend(); plt.ylim((0, ymax)) n”, “ n”, “plt.subplot(133) n”, “plt.title(‘After Lockdown’) n”, “sns.regplot(x=’Mean IMD decile’, y=’All causes rate’, data=third_df, label=f&quot;$r={pos_stats[0]}$&quot;, scatter_kws=po) n”, “plt.xlabel(‘Mean IMD Decile’, fontsize=12) n”, “plt.ylabel(‘All Causes Standardised Mortality Rate’, fontsize=12) n”, “plt.legend(); plt.ylim((0, ymax)) n”, “ n”, “plt.show()” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “After splitting the data into the three time periods, we that the the negative correlation persists for each period, but has different strengths. The potential reasons for the differences in strength are numerous. The middle plot refers to the peak period in the number of COVID-19 deaths. This could be one explanation for the interesting effect that we observe in the middle plot: the correlation is lower (the variance is lager), but the slope seems to be steeper.” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “To get a better sense of the number of deaths as a function of time take a look at this ONS study.” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### COVID-19 n”, “ n”, “Next we’ll make the same set of three plots, but look specifically at deaths involving COVID-19.” ] }, { “cell_type”: “code”, “execution_count”: 41, “metadata”: { “ExecuteTime”: { “end_time”: “2020-10-07T15:26:53.165662Z”, “start_time”: “2020-10-07T15:26:52.255192Z” } }, “outputs”: [ { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 1152x360 with 3 Axes&gt;” ] }, “metadata”: {}, “output_type”: “display_data” } ], “source”: [ “ymax = 2.5 n”, “plt.figure(figsize=(16,5)) n”, “ n”, “# calcualte correlations and slopes n”, “pre_stats = get_corr_and_slope(first_df[‘Mean IMD decile’], first_df[‘COVID-19 rate’]) n”, “dur_stats = get_corr_and_slope(second_df[‘Mean IMD decile’], second_df[‘COVID-19 rate’]) n”, “pos_stats = get_corr_and_slope(third_df[‘Mean IMD decile’], third_df[‘COVID-19 rate’]) n”, “ n”, “plt.subplot(131) n”, “plt.title(‘Before Lockdown’) n”, “sns.regplot(x=’Mean IMD decile’, y=’COVID-19 rate’, data=first_df, label=f&quot; t$r={pre_stats[0]}$ $m={pre_stats[1]}$&quot;, scatter_kws=po) n”, “plt.xlabel(‘Mean IMD Decile’, fontsize=12) n”, “plt.ylabel(‘COVID-19 Standardised Mortality Rate’, fontsize=12) n”, “plt.legend(); plt.ylim((0, 1)) n”, “ n”, “plt.subplot(132) n”, “plt.title(‘During Lockdown’) n”, “sns.regplot(x=’Mean IMD decile’, y=’COVID-19 rate’, data=second_df, label=f&quot; t$r={dur_stats[0]}$ $m={dur_stats[1]}$&quot;, scatter_kws=po) n”, “plt.xlabel(‘Mean IMD Decile’, fontsize=12) n”, “plt.ylabel(‘COVID-19 Standardised Mortality Rate’, fontsize=12) n”, “plt.legend(); plt.ylim((0, ymax)) n”, “ n”, “plt.subplot(133) n”, “plt.title(‘After Lockdown’) n”, “sns.regplot(x=’Mean IMD decile’, y=’COVID-19 rate’, data=third_df, label=f&quot; t$r={pos_stats[0]}$ $m={pos_stats[1]}$&quot;, scatter_kws=po) n”, “plt.xlabel(‘Mean IMD Decile’, fontsize=12) n”, “plt.ylabel(‘COVID-19 Standardised Mortality Rate’, fontsize=12) n”, “plt.legend(); plt.ylim((0, 1)) n”, “ n”, “plt.show()” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “&gt; ⚠️ The &quot;During Lockdown&quot; middle plot contains the peak of COVID-19 mortalities in the UK. The standardised rate is therefore much higher in this plot, and the range of the $y$-axis has been increased to reflect this. n”, “ n”, “Looking only at COVID-19 mortalities, we observe that during lockdown and the peak of the pandemic, the strength of the correlation increases. Again, there are many things that could be the cause of this. Our hypothesis is that, during lockdown, those in more socially deprived areas were more likely to be in circumstances that increased their exposure to COVID-19 (for example key workers who are unable to work remotely - see here and here). n”, “ n”, “ n”, “ n” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Conclusions n”, “ n”, “We started writing this story in order to investigate whether COVID-19 deaths were related to social deprivation. We’ve also learnt a lot of other things along the way. n”, “ n”, “First, there is a very strong relationship between deprivation and general mortality. This means that deprived areas have a higher rate of mortality from all causes than less deprived areas. Life is more difficult if you live in deprivation. This effect is still observed when looking at COVID-19 specific morality rates, although is less strong than the trend from all causes. So COVID-19 appears to be less discriminatory across the different parts of society compared to other causes of death. n”, “ n”, “We suspected at the beginning that the the state of lockdown may have different affects on different groups of people. We thus wanted to know if this relationship between COVID-19 and death rates changed during the different stages of lockdown. Our analysis shows that the relationship is stronger during the main lockdown period. There are many factors that could be influencing this observation. We believe that the fact that people from working class backgrounds are less likely to be able to work from home made them more prone to contracting the virus during lockdown and take it home with them. This would explain their higher rates of mortality. n”, “ n”, “At the moment of writing we are entering a second wave. We hope that we will be able to learn from the challenges that were faced earlier this year, and that more consideration and support is offered to people living in the most deprived areas of the country. n”, “ n”, “Thank you for taking the time to read this first Turing Data Story, we hope you have found it both interesting and informative. We encourage you to expand on the ideas presented in this story and as well as explore your own questions on this topic. 🙂 n”, “ n”, “We’re now taking in external submissions for new stories 📗 so if you are interested in contributing, please get in touch!” ] } ], “metadata”: { “kernelspec”: { “display_name”: “Python 3”, “language”: “python”, “name”: “python3” }, “language_info”: { “codemirror_mode”: { “name”: “ipython”, “version”: 3 }, “file_extension”: “.py”, “mimetype”: “text/x-python”, “name”: “python”, “nbconvert_exporter”: “python”, “pygments_lexer”: “ipython3”, “version”: “3.7.9” }, “latex_envs”: { “LaTeX_envs_menu_present”: true, “autoclose”: false, “autocomplete”: true, “bibliofile”: “biblio.bib”, “cite_by”: “apalike”, “current_citInitial”: 1, “eqLabelWithNumbers”: true, “eqNumInitial”: 1, “hotkeys”: { “equation”: “Ctrl-E”, “itemize”: “Ctrl-I” }, “labels_anchors”: false, “latex_user_defs”: false, “report_style_numbering”: false, “user_envs_cfg”: false }, “toc”: { “base_numbering”: 1, “nav_menu”: {}, “number_sections”: true, “sideBar”: true, “skip_h1_title”: false, “title_cell”: “Table of Contents”, “title_sidebar”: “Contents”, “toc_cell”: false, “toc_position”: { “height”: “calc(100% - 180px)”, “left”: “10px”, “top”: “150px”, “width”: “299.547px” }, “toc_section_display”: true, “toc_window_display”: true } }, “nbformat”: 4, “nbformat_minor”: 4 } .",
            "url": "https://samvanstroud.github.io/fastpages-test/2020/10/14/story1.ipynb",
            "relUrl": "/2020/10/14/story1.ipynb",
            "date": " • Oct 14, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://samvanstroud.github.io/fastpages-test/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://samvanstroud.github.io/fastpages-test/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://samvanstroud.github.io/fastpages-test/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://samvanstroud.github.io/fastpages-test/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}